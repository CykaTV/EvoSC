<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:PlayerList" id="PlayerList" version="3">
    <framemodel id="row">
        <quad pos="0 0" size="120 5" valign="center" bgcolor="000" z-index="-1" opacity="0.9" />
        <label pos="2 0" size="26 5" valign="center" textsize="0.75" text="-- nickname --" />
        <label pos="29 0" size="14 5" valign="center" textsize="0.75" text="-- login --" />
        <label pos="48 0" size="20 5" valign="center" textsize="0.75" text="-- score --" />
        <label class="profile" pos="70 0" size="12 3.5" valign="center" halign="center" textsize="0.5" text=" Profile" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.header')}a" />

        <frame class="admin-buttons" pos="87 0">
            <label class="warn" pos="0 0" size="12 3.5" valign="center" halign="center" textsize="0.5" text=" Warn" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.warning')}a" />
            <label class="kick" pos="13 0" size="12 3.5" valign="center" halign="center" textsize="0.5" text=" Kick" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.warning')}a" />
            <label class="ban" pos="26 0" size="12 3.5" valign="center" halign="center" textsize="0.5" text=" Ban" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.warning')}a" />
            <label class="ban" pos="39 0" size="12 3.5" valign="center" halign="center" textsize="0.5" text=" Mute" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.warning')}a" />
        </frame>
    </framemodel>

    <frame id="playerlist" pos="-60 42.5" size="120 180">
        <quad pos="0 0" size="120 5" bgcolor="{config('colors.ui.header')}" opacity="0.9" z-index="-1" />
        <quad id="handle" pos="0 0" size="115 5" z-index="5" />
        <quad id="bg" pos="0 -5" bgcolor="{config('colors.ui.background')}" opacity="0.8" z-index="-1" />
        <label pos="2 -2.5" textsize="0.8" text="👥 Player List" textprefix="$s" valign="center" />
        <label class="close" pos="117.5 -2.5" size="5 5" textsize="0.2" text="❌" textprefix="$s" valign="center" halign="center" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0003" />

        <frame id="content" size="120 80" pos="0 -5" z-index="5">
            {for $i=1; $i<=30; $i++}
            <frameinstance modelid="row" pos="0 {$i * -5 + 2.5}"></frameinstance>
            {/for}
        </frame>
    </frame>

    <frame id="input-dialog" pos="-40 11" z-index="10" hidden="1">
        <quad size="80 22" bgcolor="{config('colors.ui.background')}" opacity="0.9" z-index="-1" />
        <quad size="80 2" bgcolor="{config('colors.ui.header')}" opacity="0.9" z-index="0" />
        <label pos="40 -6" size="76" valign="center" halign="center" text="" textsize="1" z-index="1" />
        <entry pos="40 -11" size="60 4" valign="center" halign="center" textsize="1" focusareacolor1="{config('colors.ui.header')}1" focusareacolor2="{config('colors.ui.header')}3" />

        <label class="confirm" pos="32 -17" z-index="0" size="15 5" text="Confirm" ScriptEvents="1" focusareacolor1="07E20099" halign="center" valign="center" textsize="0.5" focusareacolor2="06BD00AA" scriptevents="1"/>
        <label class="cancel" pos="48 -17" z-index="0" size="15 5" text="Cancel" ScriptEvents="1" focusareacolor1="f009" halign="center" valign="center" textsize="0.5" focusareacolor2="BD0000AA" scriptevents="1"/>
    </frame>

    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

declare CMlFrame playerlist;
declare CMlFrame content;
declare CMlQuad bg;

{(new esc\Classes\ManiaLinkDrag())|noescape}

Void playerCountChanged(Integer playerCount){
    bg.Size = <playerlist.Size[0], playerCount * 5.0>;
    content.Size = <bg.Size[0], playerCount * 5.0>;
    playerlist.RelativePosition_V3 = <-(bg.Size[0]/2), (bg.Size[1]/2) + 2.5>;

    foreach(key => player in Players){
        declare row <=> (content.Controls[key] as CMlFrame);
        row.DataAttributeSet("login", player.User.Login);
        (row.Controls[1] as CMlLabel).SetText(player.User.Name);
        (row.Controls[2] as CMlLabel).SetText(player.User.Login);

        if(player.Score != Null){
            declare Integer score = player.Score.BestLap.Score;
            if(score > 0){
                (row.Controls[3] as CMlLabel).Opacity = 1.0;
            }else{
                (row.Controls[3] as CMlLabel).Opacity = 0.5;
            }
            (row.Controls[3] as CMlLabel).SetText(TL::TimeToText(score, True));
        }
    }
}

Void setupAlternatingRowBackground(){
    declare Boolean light = True;
    declare Vec3 colorLight = <0.2, 0.2, 0.2>;
    declare Vec3 colorDark = <0.1, 0.1, 0.1>;
    foreach(control in content.Controls){
        if(light){
            ((control as CMlFrame).Controls[0] as CMlQuad).BgColor = colorLight;
        }else{
            ((control as CMlFrame).Controls[0] as CMlQuad).BgColor = colorDark;
        }
        light = !light;
    }
}

//Open input dialog and return decision
Text input(Text text){
    declare inputDialogFrame <=> (Page.MainFrame.GetFirstChild("input-dialog") as CMlFrame);
    declare Text input = "";
    declare Boolean decided = False;

    //show confirm dialog
    inputDialogFrame.Show();

    //Set question text
    (inputDialogFrame.Controls[2] as CMlLabel).SetText(text);

    while(!decided){
        yield;

        foreach(event in PendingEvents){
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("confirm")){
                input = (inputDialogFrame.Controls[3] as CMlEntry).Value;
                decided = True;
            }
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("cancel")){
                input = "-1";
                decided = True;
            }
        }
    }

    //hide input dialog
    inputDialogFrame.Hide();
    (inputDialogFrame.Controls[3] as CMlEntry).SetText("", False);

    return input;
}

main() {
    playerlist <=> (Page.MainFrame.GetFirstChild("playerlist") as CMlFrame);
    content <=> (Page.MainFrame.GetFirstChild("content") as CMlFrame);
    bg <=> (Page.MainFrame.GetFirstChild("bg") as CMlQuad);

    setupAlternatingRowBackground();

    declare Integer playerCount = -1;

    while(True){
        yield;

        if(playerCount != Players.count){
            playerCount = Players.count;
            playerCountChanged(playerCount);
        }

        foreach(event in PendingEvents){
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("close")){
                playerlist.Hide();
            }

            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("profile")){
                declare login = event.Control.Parent.DataAttributeGet("login");
                TriggerPageAction("profile," ^ login);
            }

            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("kick")){
                declare login = event.Control.Parent.Parent.DataAttributeGet("login");
                declare reason = input("Enter a reason or leave empty");
                if(reason != "-1"){
                    TriggerPageAction("kick," ^ login ^ "," ^ reason);
                }
            }

            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("ban")){
                declare login = event.Control.Parent.Parent.DataAttributeGet("reason");
                declare reason = input("Enter a reason or leave empty");
                if(reason != "-1"){
                    declare length = input("Enter Length. Empty = perm. (12h = 12hours, 1d6h = 1day+6hours, m=min, mo=months, ...)");
                    if(length != "-1"){
                        TriggerPageAction("ban," ^ login ^ "," ^ length ^ "," ^ reason);
                    }
                }
            }
        }

        maniaLinkDrag();
    }
}
    --></script>
</manialink>