{contentType text}
{extends 'components.widget'}
{php $noHidescript = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}clock{/block}

    {block content}
    <label id="time" pos="34 -4" size="30 8" valign="center" halign="right" textsize="2" text="time" textprefix="$s"
           textcolor="{config('colors.ui.widget.text.primary')|noescape}"
           textfont="{config('colors.ui.font')|noescape}"/>

    <frame pos="40 -4" scale="0.75">
        <quad id="circle" size="5 5" halign="center" valign="center"
              image="https://raw.githubusercontent.com/EvoTM/EvoSC/master/core/Modules/clock/Resources/ring.png"/>
        <quad id="big" size="5 5" halign="center" valign="center"
              image="https://raw.githubusercontent.com/EvoTM/EvoSC/master/core/Modules/clock/Resources/long.png"/>
        <quad id="small" size="5 5" halign="center" valign="center"
              image="https://raw.githubusercontent.com/EvoTM/EvoSC/master/core/Modules/clock/Resources/short.png"
              opacity="0.9"/>
    </frame>
    {/block}

    {block script}
    <script><!--
    declare CMlLabel time;
    declare Real originalOpacity;

    Void anim(CMlFrame frame, Text targetPos, Integer duration){
        AnimMgr.Add(frame, targetPos, duration, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void hidescript_setup(){
        HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
        declare orig = HS_Target.RelativePosition_V3;
        declare hidden = orig;
        declare multiplier = 1;

        hidden[0] = orig[0];

        if(orig[0] < 0.0){
            multiplier = -1;
        }

        hidden[0] += 8 * HS_Target.RelativeScale * multiplier;

        HS_Pos_Visible = "<frame pos='" ^ orig[0] ^ " " ^ orig[1] ^ "' />";
        HS_Pos_Hidden = "<frame pos='" ^ hidden[0] ^ " " ^ hidden[1] ^ "' />";
    }

    Void hidescript(){
        if(HS_Target == Null){
            hidescript_setup();
        }

        declare hideSpeed for LocalUser = 10;

        if(hideSpeed == -1 || InputPlayer == Null){
            return;
        }

        declare Boolean playerIsRacing = InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
        declare Boolean mapFinished = {(isset($hideOnPodium) ? "UI.UISequence == CUIConfig::EUISequence::Podium" : "False")|noescape};
        declare Boolean overHidespeed = InputPlayer.DisplaySpeed >= hideSpeed;

        if(mapFinished){
            if(!HS_Hidden){
                HS_Hidden = True;
                AnimMgr.Add(widget, HS_Pos_Hidden, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(bg, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(time, "<label scale='1.6' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }
        }else{
            if(overHidespeed && playerIsRacing && !HS_Hidden){
                HS_Hidden = True;
                AnimMgr.Add(widget, HS_Pos_Hidden, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(bg, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(time, "<label scale='1.6' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                {if !isset($doNotPause)}
                wait(InputPlayer.DisplaySpeed < hideSpeed || InputPlayer.RaceState != CTmMlPlayer::ERaceState::Running);
                {/if}
            }
            if((!overHidespeed || !playerIsRacing) && HS_Hidden){
                HS_Hidden = False;
                AnimMgr.Add(widget, HS_Pos_Visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(bg, "<quad opacity='" ^ originalOpacity ^ "' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(time, "<label scale='1.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }
        }
    }--></script>
    {/block}

<script><!--
    {block globals}
        declare Text HS_Pos_Visible;
        declare Text HS_Pos_Hidden;
        declare CMlFrame HS_Target;
        declare Boolean HS_Hidden;
    {/block}

    {block bootScript}
        originalOpacity = bg.Opacity;
        time <=> (Page.MainFrame.GetFirstChild("time") as CMlLabel);
        declare Text visiblePos = "<frame pos='{config('clock.pos.visible')|noescape}' />";
        declare Text hiddenPos = "<frame pos='{config('clock.pos.hidden')|noescape}' />";

        declare big <=> (Page.MainFrame.GetFirstChild("big") as CMlQuad);
        declare small <=> (Page.MainFrame.GetFirstChild("small") as CMlQuad);

        declare Text timeString = "";
        declare Integer hours = 0;
        declare Integer minutes = 0;
        declare Real originalOpacity = bg.Opacity;

        left__ = {config('clock.ui.position') == 'left' ? 'True' : 'False'};
        slot__ = {config('clock.ui.slot')};
    {/block}

    {block loop}
        timeString = TL::SubString(CurrentLocalDateText, 11, 5);
        time.SetText(timeString);

        hours = TL::ToInteger(TL::SubString(timeString, 0, 2));
        minutes = TL::ToInteger(TL::SubString(timeString, 3, 2));

        small.RelativeRotation = (hours/12.0) * 360;
        big.RelativeRotation = (minutes/60.0) * 360;
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>