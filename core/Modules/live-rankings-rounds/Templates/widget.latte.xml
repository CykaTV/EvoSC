{contentType text}
{extends 'components.widget-base'}
{php $customHidescript = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}liverankings{/block}
    {block size}44 {config('live-rankings.show') * 3 + 6}{/block}

    {block content}
    <quad id="header" pos="0 0" size="44 5" bgcolor="{config('colors.ui.widget.header.color')}e" z-index="0"/>
    <quad id="bg" pos="0 0" size="49 200" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" z-index="-1"/>
    <label id="title" z-index="1" valign="center" pos="1.5 -2.5" size="44 5" textsize="0.3" text="ïƒ€ Live ranking" textfont="{config('colors.ui.font')|noescape}" />

    <framemodel id="record">
        <label z-index="2" valign="center" textprefix="$s" halign="right" pos="4.5 0" size="4 3" textsize="0.6" text="78." textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="1" valign="center" textprefix="$s" halign="right" pos="15 0" size="12 2" textsize="0.6" text="0" textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" textprefix="$s" pos="16 0" size="23 2" textsize="0.6" text="name name name name name" textfont="{config('colors.ui.font')|noescape}" />
    </framemodel>

    <frame id="ranking" pos="1 -7">
        {for $i=0; $i < config('live-rankings.show'); $i++}
        <frameinstance modelid="record" pos="0 {$i * -3}" hidden="0"/>
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Void hide(){
        HS_Hidden = True;
        declare title <=> (Page.MainFrame.GetFirstChild("title") as CMlLabel);
        AnimMgr.Add(bg, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(header, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(title, "<label textcolor='fff9' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void show(){
        HS_Hidden = False;
        declare title <=> (Page.MainFrame.GetFirstChild("title") as CMlLabel);
        AnimMgr.Add(bg, "<quad opacity='{config('colors.ui.widget.bg.opacity') - 0.15}' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(header, "<quad opacity='{config('colors.ui.widget.bg.opacity')}' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(title, "<label textcolor='ffff' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void hidescript(){
        if(HS_Target == Null){
            HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
        }

        declare UISettings settings for This;
        declare hideSpeed = settings.speed;

        if(hideSpeed == -1 || InputPlayer == Null){
            return;
        }

        declare Boolean mapFinished = {(isset($hideOnPodium) ? "UI.UISequence == CUIConfig::EUISequence::Podium" : "False")|noescape};

        if(mapFinished){
            if(!HS_Hidden){
                hide();
            }
        }else{
            declare Boolean playerIsRacing = InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
            declare Boolean overHidespeed = InputPlayer.DisplaySpeed > hideSpeed;

            if(overHidespeed && playerIsRacing && !HS_Hidden){
                hide();
            }
            if((!overHidespeed || !playerIsRacing) && HS_Hidden){
                show();
            }
        }
    }

    Void updateWidget(Text jsonData){
        declare Text[Text][][Text] scores;
        scores.fromjson(jsonData);

        declare CMlFrame ranking <=> (Page.MainFrame.GetFirstChild("ranking") as CMlFrame);
        declare Integer max = {config('live-rankings.show')};
        declare Integer i = 0;

        foreach(cpGroup => group in scores){
            foreach(score in group){
                declare Boolean dnf = score["score"] == "0" && score["cp"] == "1";

                declare frame = (ranking.Controls[i] as CMlFrame);
                frame.Show();
                (frame.Controls[2] as CMlLabel).Value = score["nick"];

                if(dnf){
                    (frame.Controls[0] as CMlLabel).Value = "";
                    (frame.Controls[1] as CMlLabel).Value = "DNF";
                }else{
                    if(score["pos"] != "0"){
                        declare pos = TL::ToInteger(score["pos"]);
                        declare addPoints = 0;
                        if(pos < Points.count){
                            addPoints = Points[pos - 1];
                        }
                        (frame.Controls[0] as CMlLabel).Value = "$" ^ headerColor ^ "+" ^ addPoints ^ "$fff";
                    }else{
                        (frame.Controls[0] as CMlLabel).Value = score["cp"] ^ ".";
                    }
                    (frame.Controls[1] as CMlLabel).Value = formatScoreCorrect(TL::ToInteger(score["score"]), True);
                }


                i += 1;
                if(i > max){
                    return;
                }
            }
        }

        for(x, i, max-1){
            (ranking.Controls[x] as CMlFrame).Hide();
        }
    }

    Void reset(){
        declare CMlFrame ranking <=> (Page.MainFrame.GetFirstChild("ranking") as CMlFrame);
        foreach(control in ranking.Controls){
            control.Hide();
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    declare Vec2 HS_POS;
    declare CMlFrame HS_Target;
    declare Boolean HS_Hidden;
    declare Text headerColor;
    declare CMlFrame header;
    declare Integer[] Points;
    {/block}

    {block bootScript}
        declare Integer LastLiveRankingsUpdate for This;
        declare Text LiveRankingsJson for This;
        declare Integer lastUpdate = 0;

        left__ = {config('live-rankings.ui.position') == 'left' ? 'True' : 'False'};
        slot__ = {config('live-rankings.ui.slot')};

        declare Text currentMapUid = Map.MapInfo.MapUid;
        headerColor = "{config('colors.ui.widget.header.color')}";
        header <=> (Page.MainFrame.GetFirstChild("header") as CMlFrame);
        Points = [{implode(',', $points)}];
        log(Points);

        reset();
    {/block}

    {block loop}
        if(currentMapUid != Map.MapInfo.MapUid){
            currentMapUid = Map.MapInfo.MapUid;
        }

        if(lastUpdate != LastLiveRankingsUpdate){
            lastUpdate = LastLiveRankingsUpdate;
            updateWidget(LiveRankingsJson);
        }

        hidescript();
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>