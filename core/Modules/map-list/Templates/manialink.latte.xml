<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:Maps:main" id="esc_maps" version="3">
    <frame id="maps-container" pos="-80 45" hidden="1">
        <quad pos="0 2.5" size="160 11" bgcolor="{header_color()|noescape}c" />
        <quad pos="0 -8" size="160 0.5" bgcolor="{header_color()|noescape}f" z-index="2" />
        <quad pos="0 2.5" size="160 101" bgcolor="{background_color()|noescape}" opacity="0.75" />
        <quad pos="0 -8.5" size="160 90" style="Bgs1" substyle="BgDialogBlur" />
        <label pos="1.5 -0.4" size="20 3" text=" Maps" valign="center" textsize="1.2" z-index="2" textcolor="ffff" />
        <quad id="close" pos="157 0.5" size="4 4" halign="center" ScriptEvents="1" />
        <label pos="157 0.9" size="3 3" text="❌" textsize="1.2" z-index="2" halign="center" textcolor="ffff" />

        <frame id="navbar" pos="0 -3" z-index="2">
            <frame pos="10 -3" z-index="2">
                <quad class="nav-button button" data-page="0" valign="center" halign="center" size="15 4" bgcolor="{header_color()|noescape}" opacity="0.2" z-index="-1" ScriptEvents="1" />
                <label textcolor="ffff" textsize="0.3" valign="center" halign="center" text="Maplist" />
            </frame>

            <frame pos="27 -3" z-index="5">
                <quad class="nav-button button" data-page="1" valign="center" halign="center" size="15 4" bgcolor="{header_color()|noescape}" opacity="0.2" z-index="-1" ScriptEvents="1" />
                <label textcolor="ffff" textsize="0.3" valign="center" halign="center" text="Favorites" />
            </frame>

            <frame pos="44 -3" z-index="5">
                <quad class="nav-button button" data-page="2" valign="center" halign="center" size="15 4" bgcolor="{header_color()|noescape}" opacity="0.2" z-index="-1" ScriptEvents="1" />
                <label textcolor="ffff" textsize="0.3" valign="center" halign="center" text="Queued maps" />
            </frame>
        </frame>

        <framemodel id="Map">
            <quad class="row" valign="center" size="156 4" bgcolor="{header_color()|noescape}" opacity="0" ScriptEvents="1" />
            <quad valign="center" pos="1 0" size="40 3" bgcolor="0000" />
            <quad valign="center" pos="52 0" size="30 3" bgcolor="0000" />
            <quad valign="center" pos="73 0" size="30 3" bgcolor="0000" />
            <label pos="1 0" valign="center" size="40 3" text="map name lol asdfasdasdsad" textcolor="ffff" textsize="0.6" z-index="1" />
            <label pos="52 0" valign="center" size="30 3" text="map author name comes here" textcolor="ffff" textsize="0.6" z-index="1" />
            <label pos="88 0" valign="center" size="30 3" halign="center" text="local" textcolor="ffff" textsize="0.6" z-index="1" />
            <label pos="96 0" valign="center" size="30 3" halign="center" text="dedi" textcolor="ffff" textsize="0.6" z-index="1" />
            <label class="fav" pos="105 0" valign="center" size="3 3" text="" textcolor="ffff" textsize="0.6" z-index="1" ScriptEvents="1" />
            <label class="juke" pos="115 0" valign="center" halign="center" size="12 3" text=" JUKE" textcolor="ffff" textsize="0.2" z-index="1" ScriptEvents="1" data-test="asd" />
            <label class="mx" pos="129 0" valign="center" halign="center" size="14 3" text=" MX INFO" textcolor="ffff" textsize="0.2" z-index="1" ScriptEvents="1" />
            <label class="delete" pos="144 0" valign="center" halign="center" size="14 3" text="DELETE" textcolor="ffff" textsize="0.2" z-index="1" ScriptEvents="1" />
        </framemodel>

        <framemodel id="QueueItem">
            <label pos="5 0" textsize="3" size="120 4" text="Mapname" />
            <label pos="5 -5" textsize="0.9" size="120 4" text="Requested by player" />
            <label pos="0 -0.5" textsize="2.5" size="120 4" text="N." />
        </framemodel>

        <frame id="tabs" pos="2 -13" z-index="2">
            <frame data-tab="0" id="maps" hidden="0" scale="0.97" pos="0 -3">
                <label pos="1  6" textsize="1" text="Name" scale="0.8" textcolor="{config('colors.ui.header')}" />
                <label pos="52 6" textsize="1" text="Author" scale="0.8" textcolor="{config('colors.ui.header')}" />
                <label pos="88 6" textsize="1" text="Local" halign="center" scale="0.8" textcolor="{config('colors.ui.header')}" />
                <label pos="96 6" textsize="1" text="Dedi" halign="center" scale="0.8" textcolor="{config('colors.ui.header')}" />
                <label pos="106 6" textsize="1" text="Favorite" halign="center" scale="0.8" textcolor="{config('colors.ui.header')}" />

                <frame id="map-list-container" pos="0 3" size="160 80">
                    <frame id="map-list">
                        {for $i = 0; $i < esc\Modules\MapList\MapList::getMapsCount() + 20; $i++}
                        <frameinstance pos="0 {$i * -4}" modelid="Map" hidden="1" />
                        {/for}
                    </frame>
                </frame>

                <frame pos="0 -81" z-index="2">
                    <quad id="pagination-box" pos="2 0" size="3.5 3.5" bgcolor="{config('colors.ui.header')|noescape}" valign="center" halign="center" z-index="-1" />

                    {for $i = 0; $i < ceil(esc\Modules\MapList\MapList::getMapsCount() / 20); $i++}
                    <label class="page" pos="{$i * 4 + 2} 0" text="{$i + 1}" size="3.5 3.5" textsize="1" valign="center" halign="center" ScriptEvents="1" />
                    {/for}
                </frame>

                <label pos="135 -80.4" halign="right" textsize="0.9" text="Search:" />
                <entry id="searchInput" pos="156 -80" size="20 3.5" halign="right" style="TextValueSmall" name="searchQuery" default="" textsize="1.2" />
            </frame>

            <frame data-tab="1" id="jukebox" hidden="1">
                <frame id="queue-list" pos="2 0">
                    <frameinstance pos="0 0" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -12" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -24" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -36" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -48" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -60" modelid="QueueItem" hidden="1" />
                    <frameinstance pos="0 -72" modelid="QueueItem" hidden="1" />
                </frame>
            </frame>
        </frame>
    </frame>

    <frame id="widget" pos="{config('ui.map.pos.visible')}" data-pos-visible="{config('ui.map.pos.visible')}" data-pos-hidden="{config('ui.map.pos.hidden')}" scale="0.8">
        <label pos="38 -2" z-index="1" size="36 3" text="Map name" halign="right" textcolor="eeee" textsize="1.4"/>
        <label pos="38 -7" z-index="1" size="36 3" text="Author name" halign="right" textcolor="dddd" valign="center" textsize="0.6"/>

        <label pos="45 -5" valign="center" halign="center" textsize="2" size="6 6" text="" textcolor="ffff"/>

        <quad pos="0 0" size="40 10" bgcolor="{config('colors.ui.background')}9" ScriptEvents="1" />
        <quad pos="40 0" size="10 10" bgcolor="{config('colors.ui.header')}e" ScriptEvents="1" />
    </frame>

    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

declare Integer activeTab;
declare CMlFrame tabs;
declare Text[][] maps;
declare Text[][] favorites;

declare Text lastQueueHash;

Integer int(Text textInteger){
    return TL::ToInteger(textInteger);
}

Text getContainerTarget(Integer page){
    declare pos = page * 80.0 - 2.0;
    declare target = "<frame pos='0 " ^ pos ^ "' />";
    return target;
}

Void goToPage(Integer pagePO){
    declare page = pagePO - 1;
    declare CMlQuad paginationBox <=> (Page.MainFrame.GetFirstChild("pagination-box") as CMlQuad);
    declare CMlFrame mapList <=> (Page.MainFrame.GetFirstChild("map-list") as CMlFrame);
    AnimMgr.Add(mapList, getContainerTarget(page), 400, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(paginationBox, "<quad pos='" ^ (page * 4 + 2) ^ " 0' />", 400, CAnimManager::EAnimManagerEasing::CubicInOut);
}

Void enablePages(Integer totalItemsCount){
    declare CMlQuad paginationBox <=> (Page.MainFrame.GetFirstChild("pagination-box") as CMlQuad);
    declare CMlFrame pagination = (paginationBox.Parent as CMlFrame);
    declare Integer pagesEnabled = totalItemsCount / 20;

    for(i, 1, {ceil(esc\Modules\MapList\MapList::getMapsCount() / 20)}){
        (pagination.Controls[i] as CMlLabel).Hide();
    }
    for(i, 1, pagesEnabled + 1){
        (pagination.Controls[i] as CMlLabel).Show();
    }

    goToPage(1);
}

Text[][] arraySort(Text[][] array, Integer column){
    declare Text[Integer] SortedColumn;

    foreach (I => Data in array) {
        SortedColumn[I] = Data[column];
    }

    SortedColumn = SortedColumn.sort();
    declare Text[][] SortedArray;

    foreach (I => Data in SortedColumn) {
        SortedArray.add(array[I]);
    }

    return SortedArray;
}

Text[][] arraySortDesc(Text[][] array, Integer column){
    declare Text[][] SortedArrayDesc;
    declare Text[][] SortedArray = arraySort(array, column);

    for(i, 1, SortedArray.count){
        SortedArrayDesc.add(SortedArray[SortedArray.count - i]);
    }

    return SortedArrayDesc;
}

Void updateMapFav(Text mapId, Text isFav){
    foreach(i => map in maps){
        if(map[5] == mapId){
            maps[i][6] = isFav;
            return;
        }
    }
}

Text[] getMapById(Text mapId){
    foreach(map in maps){
        if(map[5] == mapId){
            return map;
        }
    }

    return [""];
}

Text[][] getFavorites(){
    declare Text[][] favs;

    foreach(map in maps){
        if(map[6] == "1"){
            favs.add(map);
        }
    }

    return favs;
}

Void updateMapText(CMlFrame mapFrame, Text[] map, Integer arrayIndex){
    mapFrame.DataAttributeSet("map-id", "" ^ map[5]);

    (mapFrame.Controls[4] as CMlLabel).SetText(map[0]);
    (mapFrame.Controls[5] as CMlLabel).SetText(map[1]);
    (mapFrame.Controls[5] as CMlLabel).ToolTip = map[2];
    (mapFrame.Controls[6] as CMlLabel).SetText(map[3]);
    (mapFrame.Controls[7] as CMlLabel).SetText(map[4]);

    if(map[6] == "1"){
        (mapFrame.Controls[8] as CMlLabel).SetText("");
    }else{
        (mapFrame.Controls[8] as CMlLabel).SetText("");
    }

    mapFrame.Visible = True;
}

Void populate(Text[][] maps){
    declare CMlFrame mapList <=> (Page.MainFrame.GetFirstChild("map-list") as CMlFrame);

    foreach(mapRow in mapList.Controls){
        mapRow.Visible = False;
    }

    for(i, 0, maps.count - 1){
        declare map = maps[i];
        declare mapFrame = (mapList.Controls[i] as CMlFrame);
        updateMapText(mapFrame, map, i);
    }

    enablePages(maps.count);
}

Void search(Text query){
    declare Text[][] foundMaps;

    foreach(map in maps){
        log(map);
        if(TL::Find(query, map[0] ^ map[1] ^ map[2], False, False)){
            foundMaps.add(map);
        }
    }

    populate(foundMaps);
}

Void navButtonClick(CMlQuad button){
    declare CMlFrame navbar <=> (Page.MainFrame.GetFirstChild("navbar") as CMlFrame);
    declare Integer tab = int(button.DataAttributeGet("page"));

    for(i, 0, navbar.Controls.count - 1){
        ((navbar.Controls[i] as CMlFrame).Controls[0] as CMlQuad).Opacity = 0.2;
    }

    foreach(tabFrame in tabs.Controls){
        tabFrame.Visible = False;
    }

    if(tab == 0){
        //map list
        populate(maps);
        tabs.Controls[0].Visible = True;
    }
    if(tab == 1){
        //favorites
        populate(getFavorites());
        tabs.Controls[0].Visible = True;
    }
    if(tab == 2){
        //jukebox/map queue
        tabs.Controls[1].Visible = True;
    }

    button.Opacity = 1.0;
    activeTab = int(button.DataAttributeGet("page"));
}

Void updateQueueItem(CMlControl queueFrameControl, Text[] data, Integer i){
    declare frame <=> (queueFrameControl as CMlFrame);

    frame.Visible = True;
    frame.DataAttributeSet("map-id", data[0]);
    (frame.Controls[0] as CMlLabel).SetText("$s" ^ data[2]);
    (frame.Controls[1] as CMlLabel).SetText("Requested by " ^ data[3]);
    (frame.Controls[2] as CMlLabel).SetText("$s" ^ i ^ ".");
}

Void updateMapQueue(Text[][] items){
    declare queueList <=> (Page.MainFrame.GetFirstChild("queue-list") as CMlFrame);

    foreach(control in queueList.Controls){
        control.Visible = False;
    }

    declare Integer lastIteration = items.count;

    lastIteration = lastIteration - 1;

    for(i, 0, lastIteration){
        updateQueueItem(queueList.Controls[i], items[i], i + 1);
    }
}

main() {
    maps = {$maps|noescape};
    tabs <=> (Page.MainFrame.GetFirstChild("tabs") as CMlFrame);
    declare CMlQuad close <=> (Page.MainFrame.GetFirstChild("close") as CMlQuad);
    declare CMlFrame mapsContainer <=> (Page.MainFrame.GetFirstChild("maps-container") as CMlFrame);
    declare CMlQuad paginationBox <=> (Page.MainFrame.GetFirstChild("pagination-box") as CMlQuad);
    declare CMlFrame mapListContainer <=> (Page.MainFrame.GetFirstChild("map-list-container") as CMlFrame);
    declare CMlFrame mapList <=> (Page.MainFrame.GetFirstChild("map-list") as CMlFrame);
    declare CMlFrame navbar <=> (Page.MainFrame.GetFirstChild("navbar") as CMlFrame);
    declare searchInput <=> (Page.MainFrame.GetFirstChild("searchInput") as CMlEntry);

    //hidescript declarations
    declare CMlFrame widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
    declare CMlQuad background <=> (widget.Controls[3] as CMlQuad);
    declare CMlQuad backgroundIcon <=> (widget.Controls[4] as CMlQuad);
    declare Text visible = "<frame pos='" ^ widget.DataAttributeGet("pos-visible") ^ "' />";
    declare Text hidden = "<frame pos='" ^ widget.DataAttributeGet("pos-hidden") ^ "' />";
    declare Boolean isHidden = False;

    //current map detection
    declare Text currentMapId = "";

    populate(maps);
    activeTab = 0;

    declare Text lastMapSearchQueryHash = "";

    ((navbar.Controls[0] as CMlFrame).Controls[0] as CMlQuad).Opacity = 1.0;

    while(True){
        yield;

        if(InputPlayer != Null){
            //hidescript
            declare UI_Hide_Speed for InputPlayer = 1.0;
            declare Real speed = ML::Abs(InputPlayer.Speed);

            if(!Map.TMObjective_IsLapRace && InputPlayer.CurrentNbLaps >= 1 || UI_Hide_Speed == 0.0){
                if(speed < UI_Hide_Speed && isHidden){
                    AnimMgr.Add(widget, visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = False;
                }
            }else{
                if(speed >= UI_Hide_Speed && !isHidden){
                    AnimMgr.Add(widget, hidden, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = True;
                }

                if(speed < UI_Hide_Speed && isHidden){
                    AnimMgr.Add(widget, visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = False;
                }
            }

            //map change detection
            if(Map.MapInfo.MapUid != currentMapId){
                currentMapId = Map.MapInfo.MapUid;
                (widget.Controls[0] as CMlLabel).SetText(Map.MapInfo.Name);
                (widget.Controls[1] as CMlLabel).SetText(Map.AuthorLogin);
            }

            //search command
            declare Text MapSearchQueryHash for InputPlayer;
            declare Text MapSearchQuery for InputPlayer;

            if(lastMapSearchQueryHash != MapSearchQueryHash){
                lastMapSearchQueryHash = MapSearchQueryHash;
                mapsContainer.Show();
                searchInput.SetText(MapSearchQuery, True);
            }

            foreach(event in PendingEvents){
                if(event.Control == Null){
                    continue;
                }

                if(event.Control == background && event.Type == CMlScriptEvent::Type::MouseClick){
                    mapsContainer.Show();
                    continue;
                }

                if(event.Control == searchInput){
                    search(searchInput.Value);
                    continue;
                }

                if(event.Control == backgroundIcon && event.Type == CMlScriptEvent::Type::MouseClick){
                    navButtonClick(((navbar.Controls[1] as CMlFrame).Controls[0] as CMlQuad));
                    mapsContainer.Show();
                    continue;
                }

                if(event.Control.HasClass("nav-button")){
                    declare button = (event.Control as CMlQuad);

                    if(int(button.DataAttributeGet("page")) == activeTab){
                        continue;
                    }

                    switch(event.Type){
                        case CMlScriptEvent::Type::MouseClick: navButtonClick(button);
                        case CMlScriptEvent::Type::MouseOver: button.Opacity = 0.6;
                        case CMlScriptEvent::Type::MouseOut: button.Opacity = 0.2;
                    }

                    continue;
                }

                if(event.Control.Parent.Controls[0].HasClass("row")){
                    declare row = (event.Control.Parent.Controls[0] as CMlQuad);

                    if(event.Type == CMlScriptEvent::Type::MouseOver){
                        row.Opacity = 0.5;
                    }
                    if(event.Type == CMlScriptEvent::Type::MouseOut){
                        row.Opacity = 0.0;
                    }
                }

                if(event.Control.HasClass("fav")){
                    if(event.Type == CMlScriptEvent::Type::MouseClick){
                        declare mapId = (event.Control as CMlLabel).Parent.DataAttributeGet("map-id");
                        declare isFav = getMapById(mapId)[6] == "1";

                        if(isFav){
                            TriggerPageAction("map.fav.remove," ^ mapId);
                            updateMapFav(mapId, "0");
                        }else{
                            TriggerPageAction("map.fav.add," ^ mapId);
                            updateMapFav(mapId, "1");
                        }

                        if(activeTab == 0){
                            populate(maps);
                        }
                        if(activeTab == 1){
                            populate(getFavorites());
                        }
                    }

                    continue;
                }

                if(event.Control.HasClass("juke")){
                    if(event.Type == CMlScriptEvent::Type::MouseClick){
                        declare mapId = (event.Control as CMlLabel).Parent.DataAttributeGet("map-id");
                        TriggerPageAction("map.queue," ^ mapId);
                    }

                    continue;
                }

                if(event.Control.HasClass("mx")){
                    if(event.Type == CMlScriptEvent::Type::MouseClick){
                        declare mapId = (event.Control as CMlLabel).Parent.DataAttributeGet("map-id");
                        TriggerPageAction("mx.details," ^ mapId);
                    }

                    continue;
                }

                if(event.Control.HasClass("row")){
                    declare row = (event.Control as CMlQuad);

                    if(event.Type == CMlScriptEvent::Type::MouseOver){
                        row.Opacity = 0.5;
                    }
                    if(event.Type == CMlScriptEvent::Type::MouseOut){
                        row.Opacity = 0.0;
                    }

                    continue;
                }

                if(event.Control == close && event.Type == CMlScriptEvent::Type::MouseClick){
                    mapsContainer.Hide();
                    continue;
                }

                if(event.Control.HasClass("page") && event.Type == CMlScriptEvent::Type::MouseClick){
                    goToPage(TL::ToInteger((event.Control as CMlLabel).Value));
                    continue;
                }
            }

            declare Text QueueHash for InputPlayer;
            if(lastQueueHash != QueueHash){
                declare Text[][] QueuedMaps for InputPlayer;
                updateMapQueue(QueuedMaps);
                lastQueueHash = QueueHash;
            }
        }
    }
}
    --></script>
</manialink>