{contentType text}
{extends 'components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}local-records-widget{/block}
    {block size}44 {config('locals.rows') * 3 + 6.5}{/block}

    {block content}
    <label id="header-color" textcolor="{config('colors.ui.window.header.color')|noescape}" />

    <framemodel id="record">
        <label z-index="1" valign="center" halign="right" pos="3.5 0" size="4 2" textprefix="$s" textsize="0.4" text="78." textcolor="{config('colors.ui.window.text.primary')}" textfont="{config('colors.ui.font')|noescape}"/>
        <label z-index="0" valign="center" halign="right" pos="16 0" size="10 2" textsize="0.6" text="0:00.000" textcolor="{config('colors.ui.widget.text.primary')}4" textfont="{config('colors.ui.font')|noescape}"/>
        <label z-index="1" valign="center" halign="right" pos="16 0" size="10 2" textsize="0.6" text="0:00.000" textcolor="{config('colors.ui.widget.text.primary')}" textfont="{config('colors.ui.font')|noescape}"/>
        <label z-index="1" valign="center" pos="17 0" size="25 2" textsize="0.4" textprefix="$s" text="name" textcolor="{config('colors.ui.window.text.primary')}" textfont="{config('colors.ui.font')|noescape}"/>
        <quad pos="-1 -0.2" size="45 3" bgcolor="{config('colors.ui.window.header.color')}" opacity="0.3" z-index="-1" hidden="1" valign="center" />
    </framemodel>

    <framemodel id="window-record">
        <quad class="record" size="45 3" z-index="2" valign="center" ScriptEvents="1" />

        <frame z-index="10" pos="0 0" hidden="1">
            <label class="record-button profile" z-index="1" pos="21.5 0" size="43 3" text=" Profile" textsize="0.2" halign="center" valign="center" textfont="{config('colors.ui.font')|noescape}" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}9" focusareacolor2="{config('colors.ui.window.header.color')}c" />
        </frame>

        <frame z-index="0">
            <label z-index="1" valign="center" halign="right" pos="3.5 0" size="4 2" textprefix="$s" textsize="0.4" text="78." textfont="{config('colors.ui.font')|noescape}"/>
            <label z-index="0" valign="center" halign="right" pos="16 0" size="10 2" textsize="0.6" text="0:00.000" textcolor="eee4" textfont="{config('colors.ui.font')|noescape}"/>
            <label z-index="1" valign="center" halign="right" pos="16 0" size="10 2" textsize="0.6" text="0:00.000" textcolor="eee" textfont="{config('colors.ui.font')|noescape}"/>
            <label z-index="1" valign="center" pos="17 0" size="25 2" textsize="0.4" textprefix="$s" text="name name name name name" textfont="{config('colors.ui.font')|noescape}"/>
            <quad pos="-1 -0.2" size="44 3" bgcolor="{config('colors.ui.window.header.color')}" opacity="0.3" z-index="-1" hidden="1" valign="center" />
        </frame>
    </framemodel>

    <quad class="widget" z-index="-1" size="45 {config('locals.rows') * 3 + 6.5}" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" ScriptEvents="1"/>
    <quad z-index="-2" pos="0 -5" size="45 {config('locals.showtop') * 3 + 0.7}" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.25}"/>
    <quad size="45 5" bgcolor="{config('colors.ui.widget.header.color')}" opacity="0.8"/>
    <label z-index="1" valign="center" pos="1.5 -2.5" textsize="0.4" text="🏆 Local Records" textcolor="{config('colors.ui.widget.header.text')}" textfont="{config('colors.ui.font')}"/>

    <frame id="records" pos="1 -7">
        {for $i=0; $i<config('locals.rows'); $i++}
        <frameinstance modelid="record" pos="0 {$i * -3}" hidden="0"/>
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Text[] getOnlinePlayers(){
        declare Text[] onlinePlayers = Text[];
        foreach(player in Players){
            onlinePlayers.add(player.User.Login);
        }
        return onlinePlayers;
    }

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Integer getMyRank(Record[Integer] records){
        foreach(record in records){
            if(record.login == LocalUser.Login){
                return record.rank;
            }
        }

        return -1;
    }

    Void fillRecord(Integer index, Record record, Text[] onlinePlayers){
        declare records <=> (Page.MainFrame.GetFirstChild("records") as CMlFrame);

        if(index >= records.Controls.count){
            return;
        }

        declare recordsFrame = (records.Controls[index] as CMlFrame);
        (recordsFrame.Controls[0] as CMlLabel).SetText(record.rank ^ ".");
        (recordsFrame.Controls[1] as CMlLabel).SetText(formatScoreCorrect(record.score, False));
        (recordsFrame.Controls[2] as CMlLabel).SetText(formatScoreCorrect(record.score, True));
        (recordsFrame.Controls[3] as CMlLabel).SetText(record.name);
        if(onlinePlayers.exists(record.login)){
            (recordsFrame.Controls[0] as CMlLabel).TextColor = headerColor;
            (recordsFrame.Controls[4] as CMlLabel).Show();
        }else{
            (recordsFrame.Controls[0] as CMlLabel).TextColor = primaryColor;
            (recordsFrame.Controls[4] as CMlLabel).Hide();
        }
        recordsFrame.Show();
    }

    Void updateWidget(Record[Integer] records){
        declare myRank = getMyRank(records);
        declare filled = 0;
        declare skipped = 0;
        declare skip = 0;
        declare showTop = {config('locals.showtop')};
        declare max = {config('locals.rows')};
        declare toFill = max - showTop;

        if(myRank == -1){
            skip = records.count - toFill - showTop;
        }else{
            skip = myRank - (max/2);

            if(myRank + (max/2) > records.count){
                skip = skip + records.count - (myRank + (max/2));
            }
        }

        declare Text[] onlinePlayers = getOnlinePlayers();

        foreach(record in records){
            if(filled < showTop){
                fillRecord(filled, record, onlinePlayers);
                filled = filled + 1;
                continue;
            }

            if(skipped < skip){
                skipped = skipped + 1;
                continue;
            }

            fillRecord(filled, record, onlinePlayers);

            filled = filled + 1;
        }

        declare recordsFrame <=> (Page.MainFrame.GetFirstChild("records") as CMlFrame);
        declare skipFilled = 0;

        foreach(frame in recordsFrame.Controls){
            if(skipFilled < filled){
                skipFilled = skipFilled + 1;
                continue;
            }

            frame.Hide();
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    #Struct Record {
        Integer rank;
        Integer[] cps;
        Integer score;
        Text name;
        Text login;
    }

    declare Vec3 headerColor;
    declare Vec3 primaryColor;
    {/block}

    {block bootScript}
        declare Record[Integer] LocalRecords_ for LocalUser;
        declare Integer LastLocalRecordsUpdate for LocalUser = 0;
        declare Integer lastUpdate = 0;
        declare Integer playerCount = 0;

        primaryColor = TL::ToColor("{config('colors.ui.window.text.primary')|noescape}");
        headerColor = TL::ToColor("{config('colors.ui.window.header.color')|noescape}");

        left__ = {config('locals.ui.position') == 'left' ? 'True' : 'False'};
        slot__ = {config('locals.ui.slot')};
    {/block}

    {block loop}
            if(LastLocalRecordsUpdate != lastUpdate){
                //update
                lastUpdate = LastLocalRecordsUpdate;
                updateWidget(LocalRecords_);
            }

            if(playerCount != Players.count){
                playerCount = Players.count;
                updateWidget(LocalRecords_);
            }
    {/block}

    {block pendingEvents}
                if(event.Control.HasClass("widget") && event.Type == CMlScriptEvent::Type::MouseClick){
                    TriggerPageAction("locals.show");
                }
    {/block}
--></script>
</manialink>