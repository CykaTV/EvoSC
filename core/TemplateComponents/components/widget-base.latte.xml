{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:{include id}" id="{include id}" version="3">
    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

#Struct WidgetRow {
    Real height;
    Boolean visible;
}

#Struct WidgetGrid {
    WidgetRow[Integer] left;
    WidgetRow[Integer] right;
}

{include globals}

declare CMlFrame widget;
declare CMlQuad bg;
declare Boolean left__;
declare Integer slot__;
--></script>

    <frame pos="0 0" id="widget" size="{include size}">
        {include content}
    </frame>

    {if !isset($customHidescript)}
    {include 'scripts.hide'}
    {/if}
    {include script}

    <script><!--
    Void rearrange__(){
        declare WidgetGrid grid__ for This;
        declare WidgetRow[Integer] column;
        declare Real gutter = 1.0;

        declare width = widget.Size[0] * widget.RelativeScale;
        declare height = widget.Size[1] * widget.RelativeScale;

        if(left__){
            widget.RelativePosition_V3[0] = 0.0;
            column = grid__.left;
        }else{
            widget.RelativePosition_V3[0] = 160.0 - width;
            column = grid__.right;
        }

        declare heights = 0.0;
        declare count = 1;

        for(i, 1, slot__ - 1){
            if(!column.existskey(i)){
                continue;
            }
            if(!column[i].visible){
                continue;
            }

            heights += column[i].height;
            count += 1;
        }

        declare newY = 90.0 - heights - (gutter * count);
        if(widget.RelativePosition_V3[1] != newY){
            declare posString = widget.RelativePosition_V3[0] ^ " " ^ newY;
            AnimMgr.Add(widget, """<frame pos='""" ^ posString ^ """' />""", 200, CAnimManager::EAnimManagerEasing::Linear);
        }
        sleep(200);
        hidescript_setup();

        log(grid__);
    }

    main() {
        declare WidgetGrid grid__ for This;
        declare Integer LastUiUpdate for This = 0;
        declare Integer lastUiUpdate;

        if(LastUiUpdate == 0){
            LastUiUpdate = GameTime;
            lastUiUpdate = LastUiUpdate;
        }

        widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        bg <=> (Page.MainFrame.GetFirstChild("bg") as CMlQuad);

        {include bootScript}

        if(left__){
            if(grid__.left.count == 0){
                grid__.left = WidgetRow[Integer];
            }
            if(!grid__.left.existskey(slot__)){
                declare WidgetRow wr;
                wr.height = 0.0;
                wr.visible = True;
                grid__.left[slot__] = wr;
            }
            declare height = widget.Size[1] * widget.RelativeScale;
            if(height > grid__.left[slot__].height){
                grid__.left[slot__].height = height;
            }
            grid__.left[slot__].visible = True;
        }else{
            if(grid__.right.count == 0){
                grid__.right = WidgetRow[Integer];
            }
            if(!grid__.right.existskey(slot__)){
                declare WidgetRow wr;
                wr.height = 0.0;
                wr.visible = True;
                grid__.right[slot__] = wr;
            }
            declare height = widget.Size[1] * widget.RelativeScale;
            if(height > grid__.right[slot__].height){
                grid__.right[slot__].height = height;
            }
            grid__.right[slot__].visible = True;
        }

        LastUiUpdate = GameTime;
        rearrange__();

        while(True){
            yield;

            foreach(event in PendingEvents){
                if(event.Control == Null) continue;

                {include pendingEvents}
            }

            {include loop}

            {if !isset($customHidescript)}
            hidescript();
            {/if}

            if(lastUiUpdate != LastUiUpdate){
                lastUiUpdate = LastUiUpdate;
                rearrange__();
            }
        }
    }
    --></script>
</manialink>