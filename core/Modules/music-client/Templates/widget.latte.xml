<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:music-widget" id="music-widget" version="3">
    <frame id="widget" data-pos-visible="{config('ui.music.pos.visible')}" data-pos-hidden="{config('ui.music.pos.hidden')}" scale="{config('ui.music.pos.scale') ?? 0.8|noescape}">
        <quad id="background" pos="0 0" z-index="-1" size="40 10" bgcolor="{background_color()|noescape}9"/>
        <quad pos="40 0" z-index="-1" size="10 10" bgcolor="{header_color()|noescape}e"/>
        <label pos="45 -5" valign="center" halign="center" textsize="3" size="6 6" text="♫" textcolor="ffff"/>
        <audio id="music" music="1" hidden="1" />

        <frame id="main-frame" z-index="1">
            <quad id="show" pos="0 0" size="50 10" ScriptEvents="1" />
            <quad id="window" size="40 10" z-index="-5" ScriptEvents="1" />

            <frame id="content" pos="0 0">
                <label id="title" pos="38 -2.5" z-index="1" size="36 3" text="" halign="right" textcolor="fffe" textsize="1.3"/>
                <label id="artist" pos="38 -6.5" z-index="1" size="36 3" text="" halign="right" textcolor="fffc" textsize="0.4"/>
            </frame>
        </frame>
    </frame>

    <framemodel id="Song">
        <label pos="0 0" size="78 3" text="Title" textsize="1" textcolor="ffff" />
        <label pos="80 0" size="58 3" text="Artist" textsize="1" textcolor="ffff" />
        <label pos="150 0" size="8 3" text="Length" textsize="1" textcolor="ffff" />
        <quad pos="0 0" size="156 3.7" bgcolor="fff0" ScriptEvents="1" />
    </framemodel>

    <frame id="music-container" pos="-80 45" hidden="0">
        <frame id="list">
            <quad pos="0 2.5" size="160 6" bgcolor="{header_color()|noescape}" />
            <quad pos="0 -2.5" size="160 90" bgcolor="{background_color()|noescape}" opacity="0.5" />
            <quad pos="0 -2.5" size="160 90" style="Bgs1" substyle="BgDialogBlur" />
            <label pos="1.5 0.5" size="20 3" text="Music" textsize="1.2" z-index="2" textcolor="ffff" />
            <quad id="close" pos="157 0.5" size="4 4" halign="center" ScriptEvents="1" />
            <label pos="157 0.5" size="3 3" text="❌" textsize="1.2" z-index="2" halign="center" textcolor="ffff" />

            <frame id="song-list" z-index="5" pos="2 -6">
                <frame id="song-list-container" pos="0 0">
                    {for $i = 0; $i < esc\Modules\MusicClient\MusicClient::getSongsCount(); $i++}
                    <frameinstance modelid="Song" class="row" pos="0 {$i * -4}" ScriptEvents="1" />
                    {/for}
                </frame>
            </frame>

            <frame pos="2 -89" z-index="2">
                <quad id="pagination-box" pos="2 0" size="3.5 3.5" bgcolor="{primary_color()|noescape}" valign="center" halign="center" z-index="-1" />

                {for $i = 0; $i < ceil(esc\Modules\MusicClient\MusicClient::getSongsCount() / 20); $i++}
                <label class="page" pos="{$i * 4 + 2} 0" text="{$i + 1}" size="3.5 3.5" textsize="1" valign="center" halign="center" ScriptEvents="1" />
                {/for}
            </frame>

            <frame pos="118 -89" z-index="3">
                <label pos="-1 0" text="Search:" textsize="1" halign="right" valign="center"/>
                <entry id="search" pos="0 0" size="40 3" default="" textsize="1" valign="center" ScriptEvents="1" />
            </frame>
        </frame>
    </frame>

    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

//struct song: Url, Title, Artist, Length

declare Text[][] Songs;
declare CMlMediaPlayer music;
declare CMlQuad paginationBox;

Text[] getSong(Integer songId){
    if(Songs.count > 0 && songId < Songs.count){
        return Songs[songId];
    }

    return ["unknown","unknown","unknown","unknown"];
}

Text[] getRandomSong(){
    if(Songs.count > 0){
        return Songs[ML::Rand(0, Songs.count)];
    }

    return ["unknown","unknown","unknown","unknown"];
}

Void setSong(Text[] song){
    music.Stop();
    music.Url = song[0];
    sleep(5);
    music.Play();

    (Page.MainFrame.GetFirstChild("title") as CMlLabel).SetText(song[1]);
    (Page.MainFrame.GetFirstChild("artist") as CMlLabel).SetText(song[2]);
}

Real getPlayerSpeed(){
    declare Real speed = 0.0;

    if(InputPlayer != Null){
        speed = InputPlayer.Speed * 3.6;

        if(speed < 0){
            return -speed;
        }
    }

    return speed;
}

Void populateList(Text[][] songs){
    declare songList <=> (Page.MainFrame.GetFirstChild("song-list") as CMlFrame);
    declare lastKey = 0;

    foreach(key => song in songs){
        declare frame <=> ((songList.Controls[0] as CMlFrame).Controls[key] as CMlFrame);

        (frame.Controls[0] as CMlLabel).SetText(song[1]);
        (frame.Controls[1] as CMlLabel).SetText(song[2]);
        (frame.Controls[2] as CMlLabel).SetText(song[3]);
        (frame.Controls[3] as CMlControl).DataAttributeSet("song-id", TL::ToText(key));

        lastKey = key;
    }

    if(lastKey + 1 < Songs.count){
        for(i, lastKey + 1, Songs.count - 1){
            declare frame <=> ((songList.Controls[0] as CMlFrame).Controls[i] as CMlFrame);

            (frame.Controls[0] as CMlLabel).SetText("");
            (frame.Controls[1] as CMlLabel).SetText("");
            (frame.Controls[2] as CMlLabel).SetText("");
        }
    }

    songList.ClipWindowActive = True;
    songList.ClipWindowRelativePosition = <80.0, -40.0>;
    songList.ClipWindowSize = <160.0, 79.5>;
}

Void setRowColor(CMlControl frame, Text color){
    AnimMgr.Add(frame.Parent.Controls[0], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(frame.Parent.Controls[1], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(frame.Parent.Controls[2], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
}

Text getContainerTarget(Integer page){
    declare pos = page * 80.0;
    declare target = "<frame pos='0 " ^ pos ^ "' />";
    return target;
}

Void searchSong(Text search){
    if(TL::Length(search) == 0){
        populateList(Songs);
        return;
    }

    declare Text[][] songsFound;

    declare searchStringLength = TL::Length(search);

    foreach(song in Songs){
        declare songTitleLength = TL::Length(song[4]);

        for(i, 0, songTitleLength - searchStringLength){
            if(TL::SubString(song[4], i, searchStringLength) == search){
                songsFound.add(song);
                continue;
            }
        }
    }

    populateList(songsFound);

    AnimMgr.Add((Page.MainFrame.GetFirstChild("song-list-container") as CMlFrame), getContainerTarget(0), 200, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(paginationBox, "<quad pos='2 0' />", 200, CAnimManager::EAnimManagerEasing::CubicInOut);
}

main() {
    Songs = {esc\Modules\MusicClient\MusicClient::musicToManiaScriptArray()|noescape};
    music <=> (Page.MainFrame.GetFirstChild("music") as CMlMediaPlayer);
    paginationBox <=> (Page.MainFrame.GetFirstChild("pagination-box") as CMlQuad);
    declare CMlFrame widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
    declare CMlFrame songList <=> (Page.MainFrame.GetFirstChild("song-list") as CMlFrame);
    declare CMlFrame songListContainer <=> (Page.MainFrame.GetFirstChild("song-list-container") as CMlFrame);
    declare CMlQuad close <=> (Page.MainFrame.GetFirstChild("close") as CMlQuad);
    declare CMlQuad show <=> (Page.MainFrame.GetFirstChild("show") as CMlQuad);
    declare CMlEntry search <=> (Page.MainFrame.GetFirstChild("search") as CMlEntry);
    declare CMlQuad background <=> (Page.MainFrame.GetFirstChild("background") as CMlQuad);
    declare CMlFrame musicContainer <=> (Page.MainFrame.GetFirstChild("music-container") as CMlFrame);
    declare Text visible = "<frame pos='" ^ widget.DataAttributeGet("pos-visible") ^ "' />";
    declare Text hidden = "<frame pos='" ^ widget.DataAttributeGet("pos-hidden") ^ "' />";
    declare Boolean isHidden = False;
    declare Vec3 startPos;

    populateList(Songs);
    AnimMgr.Add(widget, visible, 1, CAnimManager::EAnimManagerEasing::ExpInOut);

    sleep(100);

    while(True){
        yield;

        if(InputPlayer != Null){
            declare hideSpeed for InputPlayer = 1.0;

            if(startPos != MapStartLinePos){
                startPos = MapStartLinePos;
                setSong(getRandomSong());
            }

            if(getPlayerSpeed() >= hideSpeed && !isHidden){
                isHidden = True;
                AnimMgr.Add(widget, hidden, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(background, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }

            if(getPlayerSpeed() < hideSpeed && isHidden){
                isHidden = False;
                AnimMgr.Add(widget, visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                AnimMgr.Add(background, "<quad opacity='1.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }

            foreach(event in PendingEvents){
                if(event.Control == Null){
                    continue;
                }

                if(event.Control == search){
                    searchSong(search.Value);
                    continue;
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseClick){
                    declare songId = TL::ToInteger(event.Control.DataAttributeGet("song-id"));
                    setSong(getSong(songId));
                    continue;
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseOver){
                    setRowColor(event.Control, {primary_color()});
                    continue;
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseOut){
                    setRowColor(event.Control, "fff");
                    continue;
                }

                if(event.Control.HasClass("page") && event.Type == CMlScriptEvent::Type::MouseClick){
                    declare page = TL::ToInteger((event.Control as CMlLabel).Value) - 1;
                    AnimMgr.Add(songListContainer, getContainerTarget(page), 400, CAnimManager::EAnimManagerEasing::CubicInOut);
                    AnimMgr.Add(paginationBox, "<quad pos='" ^ event.Control.RelativePosition_V3[0] ^ " 0' />", 400, CAnimManager::EAnimManagerEasing::CubicInOut);
                    continue;
                }

                if(event.Control == close && event.Type == CMlScriptEvent::Type::MouseClick){
                    musicContainer.Hide();
                    continue;
                }

                if(event.Control == show && event.Type == CMlScriptEvent::Type::MouseClick){
                    musicContainer.Show();
                    continue;
                }
            }
        }
    }
}
    --></script>
</manialink>