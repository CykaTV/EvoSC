{contentType text}
{extends 'components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}music-client{/block}
    {block size}44 8{/block}

    {block content}
        <quad id="bg" pos="0 0" size="36 8" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" z-index="-1"/>
        <quad id="header" pos="36 0" size="8 8" bgcolor="{config('colors.ui.widget.header.color')}e" z-index="-1"/>

        <label pos="40 -3.5" valign="center" halign="center" textsize="2.3" size="6 6" text="♫" textcolor="{config('colors.ui.widget.text.primary')}" textfont="{config('colors.ui.font')|noescape}"/>

        <frame id="main-frame" z-index="1" pos="0 -0" size="50 10">
            <frame id="content" pos="34.5 -2" scale="0.8" hidden="0">
                <label id="title" pos="0 0" z-index="1" size="39 3" text="" halign="right" textcolor="fffe"
                       textsize="1.3" textfont="{config('colors.ui.font')|noescape}"/>
                <label id="artist" pos="0 -4" z-index="1" size="39 3" text="" halign="right" textcolor="fffc"
                       textsize="0.4" textfont="{config('colors.ui.font')|noescape}"/>
            </frame>

            <frame id="loading" pos="9 -4" scale="0.8" hidden="1">
                <frame id="progress" pos="0 -0.25" scale="0.5">
                    <label pos="0.15 0.7" z-index="1" text="⟳" halign="center" valign="center" textcolor="fffe"
                           textsize="4" textfont="{config('colors.ui.font')|noescape}"/>
                </frame>
                <label pos="4 1.15" z-index="1" text="Loading" halign="left" valign="center" textcolor="fffe"
                       textsize="1" textfont="{config('colors.ui.font')|noescape}"/>
                <label id="loading-title" pos="4 -1.45" z-index="1" text="Title" halign="left" valign="center" textcolor="bbbe"
                       textsize="0.35" size="24" textfont="{config('colors.ui.font')|noescape}"/>
            </frame>

            <frame id="widget-controls" pos="0 1" z-index="10">
                <quad class="music-control" pos="-5 0" size="36 8" bgcolor="{config('colors.ui.widget.bg.color')|noescape}6"
                      z-index="-1"/>
                <quad class="music-control" pos="-5 0" size="36 8" bgcolor="{config('colors.ui.widget.header.color')}6"
                      z-index="-2"/>

                <frame pos="1 -4">
                    <label class="skip" textsize="1.5" size="12 8.2" text="" z-index="0" halign="center"
                           valign="center" ScriptEvents="1" focusareacolor1="0000"
                           focusareacolor2="{config('colors.ui.widget.header.color')}9"/>
                    <label pos="0 1" textsize="1" size="8 8" text="" z-index="1" halign="center" valign="center"/>
                    <label pos="0 -2" textsize="1" scale="0.6" size="8 8" text="Skip" z-index="1" halign="center"
                           valign="center"/>
                </frame>
                <frame pos="19 -4">
                    <label class="music-list" textsize="1.5" size="24 8.2" text="" z-index="0" halign="center"
                           valign="center" ScriptEvents="1" focusareacolor1="0000"
                           focusareacolor2="{config('colors.ui.widget.header.color')}9"/>

                    <label pos="0 1" textsize="1" size="8 8" text="" z-index="1" halign="center" valign="center"/>

                    <label pos="0 -2" textsize="1" scale="0.6" size="8 8" text="Music" z-index="1" halign="center"
                           valign="center"/>
                </frame>
            </frame>
        </frame>
    {/block}

    {block script}
    <script><!--
declare CMlFrame progress;
declare Text baseUrl;
declare Boolean loading;
declare Vec3 hoverColor;
declare Ident currentMap;
declare Boolean controlsVisible;

Void startLoading(Text title){
    declare loadingFrame <=> (Page.MainFrame.GetFirstChild("loading") as CMlLabel);
    declare content <=> (Page.MainFrame.GetFirstChild("content") as CMlFrame);
    loadingFrame.Show();
    controlsVisible = False;
    AnimMgr.Add(Page.MainFrame.GetFirstChild("widget-controls"), " <frame pos='5.0 -10.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
    (Page.MainFrame.GetFirstChild("loading-title") as CMlLabel).SetText(title);
    content.Hide();
    loading = True;
}

Void stopLoading(){
    declare loadingFrame <=> (Page.MainFrame.GetFirstChild("loading") as CMlLabel);
    declare content <=> (Page.MainFrame.GetFirstChild("content") as CMlFrame);
    loadingFrame.Hide();
    (Page.MainFrame.GetFirstChild("widget-controls") as CMlFrame).Show();
    content.Show();
    loading = False;
}

Void stopAllSounds(){
    declare CAudioSource[] toDestroy = CAudioSource[];

    foreach(sound in Audio.Sounds){
        if(sound.IsPlaying && !sound.DownloadInProgress){
            toDestroy.add(sound);
        }
    }

    foreach(sound in toDestroy){
        Audio.DestroySound(sound);
    }
}

Void updateWidget(Song song){
    (Page.MainFrame.GetFirstChild("title") as CMlLabel).SetText(song.title);

    declare artist = song.artist;

    if(song.album != "n/a"){
        artist = song.album ^ " - " ^ artist;
    }

    (Page.MainFrame.GetFirstChild("artist") as CMlLabel).SetText(artist);
}

Void playSong(Song song){
    declare MusicLibrary musicLib for This;
    declare Song ESC_MC_PLAY for This;
    declare url = musicLib.server ^ "?song=" ^ TL::URLEncode(song.file);

    startLoading(song.title);

    declare audio = Audio.CreateSound(url, 1.0, True, True, False);
    declare startTime = GameTime;

    while(audio.DownloadInProgress){
        yield;
        hidescript();
        progress.RelativeRotation = progress.RelativeRotation + 2.0;

        if(GameTime > (startTime + 3500)){
            startLoading("Reset to start the song.");

            if(GameTime > (startTime + 15000)){
                startLoading("Failed to start song.");
                sleep(2500);
                stopLoading();
                return;
            }
        }
    }

    stopAllSounds();

    audio.Play();

    {if isVerbose()}
    log("[EvoSC:music-client] Playing '" ^ song.title ^ "' by " ^ song.artist ^ " (" ^ song.length ^ ")");
    {/if}

    updateWidget(song);

    stopLoading();
}

Void playRandomSong(){
    declare MusicLibrary musicLib for This;
    playSong(musicLib.songs[ML::Rand(0, musicLib.songs.count - 1)]);
}
--></script>
    {/block}

    <script><!--
    {block globals}
        #Struct Song {
            Text title;
            Text artist;
            Text album;
            Text file;
            Text length;
        }

        #Struct MusicLibrary {
            Song[] songs;
            Text server;
        }
    {/block}

    {block bootScript}
        declare MusicLibrary musicLib for This;
        declare Song StartSong for This;
        declare Song ESC_MC_PLAY for This;
        declare Text SearchSong for This = "";
        declare Song lastStartedSong;

        wait(StartSong.title != "");
        updateWidget(StartSong);

        progress <=> (Page.MainFrame.GetFirstChild("progress") as CMlFrame);
        hoverColor = TL::ToColor("{config('colors.ui.window.header.color')}");

        declare CMlFrame mainFrame <=> (Page.MainFrame.GetFirstChild("main-frame") as CMlFrame);
        declare CMlFrame widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        declare CMlFrame widgetControls <=> (Page.MainFrame.GetFirstChild("widget-controls") as CMlFrame);

        AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 1, CAnimManager::EAnimManagerEasing::QuadOut);

        controlsVisible = False;
        declare musicPlaying = True;

        left__ = {config('music.ui.position') == 'left' ? 'True' : 'False'};
        slot__ = {config('music.ui.slot')};
    {/block}

    {block loop}
        if(Map.Id != currentMap && StartSong.title != ""){
            updateWidget(StartSong);
            stopAllSounds();
            currentMap = Map.Id;
        }

        if(loading){
            progress.RelativeRotation = progress.RelativeRotation + 2.0;
        }

        if(ESC_MC_PLAY != lastStartedSong){
            lastStartedSong = ESC_MC_PLAY;
            playSong(ESC_MC_PLAY);
        }

        declare x_min = widget.RelativePosition_V3[0];
        declare x_max = widget.RelativePosition_V3[0] + (mainFrame.Size[0] * widget.RelativeScale);
        declare y_min = widget.RelativePosition_V3[1];
        declare y_max = widget.RelativePosition_V3[1] - (mainFrame.Size[1] * widget.RelativeScale);
        declare Boolean xInBounds = (MouseX > x_min && MouseX < x_max);
        declare Boolean yInBounds = (MouseY < y_min && MouseY > y_max);

        if(!(xInBounds && yInBounds) && controlsVisible){
            controlsVisible = False;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
        if((xInBounds && yInBounds) && !controlsVisible){
            controlsVisible = True;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 0.1' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
    {/block}

    {block pendingEvents}
        if(event.Control.HasClass("skip") && event.Type == CMlScriptEvent::Type::MouseClick){
            playRandomSong();
            continue;
        }

        if(event.Control.HasClass("music-list") && event.Type == CMlScriptEvent::Type::MouseClick){
            SearchSong = "   ";
            continue;
        }
    {/block}
    --></script>
</manialink>