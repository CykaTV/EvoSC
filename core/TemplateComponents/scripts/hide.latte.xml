{contentType text}
<script><!--
declare Vec2 HS_POS;
declare CMlFrame HS_Target;
declare Boolean HS_Hidden;

declare Vec2 pos;
declare Real width;
declare Integer dirX;
declare Integer dirY;
declare Real multiplier;

Void hs_hide(Integer duration){
    HS_Hidden = True;
    declare Real x;
    if(HS_POS[0] < 0.0){
        x = (HS_Target.Size[0] * -HS_Target.RelativeScale) - 160.5;
    }else{
        x = 160.5;
    }
    AnimMgr.Add(HS_Target, "<frame pos='" ^ x ^ " " ^ HS_POS[1] ^ "' />", duration, CAnimManager::EAnimManagerEasing::ExpInOut);
}

Void hs_show(Integer duration){
    HS_Hidden = False;
    AnimMgr.Add(HS_Target, "<frame pos='" ^ HS_POS[0] ^ " " ^ HS_POS[1] ^ "' />", duration, CAnimManager::EAnimManagerEasing::ExpInOut);
}

Void hs(){
    if(HS_Target == Null){
        HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
    }

    declare UISettings settings for This;
    declare Boolean ESC_Tab_Pressed for This;
    declare hideSpeed = settings.speed;

    if(hideSpeed == -1 || InputPlayer == Null){
        return;
    }

    declare Boolean mapFinished = {(isset($hideOnPodium) ? "UI.UISequence == CUIConfig::EUISequence::Podium" : "False")|noescape};

    if(mapFinished){
        if(!HS_Hidden){
            hs_hide(800);
        }
    }else{
        if(ESC_Tab_Pressed == True){
            hs_show(1);
            wait(ESC_Tab_Pressed == False);
            hs_hide(1);
        }

        if(InputPlayer == Null){
            return;
        }

        declare Boolean playerIsRacing = InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
        declare Boolean overHidespeed = InputPlayer.DisplaySpeed > hideSpeed;

        if(overHidespeed && playerIsRacing && !HS_Hidden){
            hs_hide(800);

            {if !isset($doNotPause)}
            //wait(InputPlayer.DisplaySpeed <= hideSpeed || InputPlayer.RaceState != CTmMlPlayer::ERaceState::Running);
            {/if}
        }
        if((!overHidespeed || !playerIsRacing) && HS_Hidden){
            hs_show(600);
        }
    }
}

Void april(){
    if(HS_Target == Null){
        HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
        width = HS_Target.Size[0];

        if(HS_Target.RelativePosition_V3[0] > 0){
            dirX = -1;
        }else{
            dirX = 1;
        }
        if(HS_Target.RelativePosition_V3[1] > 0){
            dirY = 1;
        }else{
            dirY = -1;
        }
        multiplier = ML::Rand(0.0001, 0.0003);
    }

    if(InputPlayer == Null){
        return;
    }
    if(InputPlayer.DisplaySpeed < 5){
        return;
    }

    declare addX = InputPlayer.Speed * InputPlayer.Speed * dirX * multiplier;
    declare addY = InputPlayer.Speed * InputPlayer.Speed * dirY * multiplier;
    HS_Target.RelativePosition_V3[0] += addX;
    HS_Target.RelativePosition_V3[1] += addY;

    if(dirX == 1 && HS_Target.RelativePosition_V3[0]+width > 155){
        dirX = -1;
    }
    if(dirX == -1 && HS_Target.RelativePosition_V3[0] < -155){
        dirX = 1;
    }
    if(dirY == 1 && HS_Target.RelativePosition_V3[1] > 85){
        dirY = -1;
    }
    if(dirY == -1 && HS_Target.RelativePosition_V3[1] < -80){
        dirY = 1;
    }
}

Void hidescript(){
    declare Boolean AprilMadness for This = True;
    if(AprilMadness){
        april();
    }else{
        hs();
    }
}

--></script>