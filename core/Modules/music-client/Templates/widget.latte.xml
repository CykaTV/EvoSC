<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:music-widget" id="music-widget" version="3">
    <frame id="widget" pos="{config('music.pos.visible')}" data-pos-visible="{config('music.pos.visible')}" data-pos-hidden="{config('music.pos.hidden')}" scale="{config('music.pos.scale') ?? 0.8|noescape}">
        <quad id="background" pos="0 0" z-index="-1" size="40 10" bgcolor="{background_color()|noescape}9"/>
        <quad id="icon-background" pos="40 0" z-index="-1" size="10 10" bgcolor="{header_color()|noescape}e"/>
        <label pos="45 -5" valign="center" halign="center" textsize="3" size="6 6" text="♫" textcolor="ffff"/>
        <audio id="music" music="1" hidden="1" />

        <frame id="main-frame" z-index="1" size="50 10">
            <frame id="content" pos="38 -2.5" hidden="1">
                <label id="title" pos="0 0" z-index="1" size="36 3" text="" halign="right" textcolor="fffe" textsize="1.3"/>
                <label id="artist" pos="0 -4" z-index="1" size="36 3" text="" halign="right" textcolor="fffc" textsize="0.4"/>
            </frame>

            <frame id="loading" pos="12 -5">
                <frame id="progress" pos="0 0">
                    <label pos="0.15 0.7" z-index="1" text="⟳" halign="center" valign="center" textcolor="fffe" textsize="4"/>
                </frame>
                <label pos="6 0" z-index="1" text="Loading" halign="left" valign="center" textcolor="fffe" textsize="1"/>
            </frame>

            <frame id="widget-controls" pos="5 -10.5" z-index="10">
                <quad class="music-control" pos="-5 0" size="40 10" bgcolor="{background_color()|noescape}6" z-index="-1" />
                <quad class="music-control" pos="-5 0" size="40 10" bgcolor="{config('colors.ui.header')}f" z-index="-2" />

                <label class="skip" pos="1.7 -5" textsize="1.5" size="13.3 10" text="" z-index="0" halign="center" valign="center" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.header')}9" />
                <label class="music-list" pos="15 -5" textsize="1.5" size="13.3 10" text="" z-index="0" halign="center" valign="center" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.header')}9" />

                <label pos="1.7 -3.5" textsize="1.5" size="10 10" text="" z-index="1" halign="center" valign="center" />
                <label pos="15 -3.5" textsize="1.5" size="10 10" text="" z-index="1" halign="center" valign="center" />

                <label pos="1.7 -7" textsize="1" scale="0.8" size="10 10" text="Skip" z-index="1" halign="center" valign="center" />
                <label pos="15 -7" textsize="1" scale="0.8" size="10 10" text="Music" z-index="1" halign="center" valign="center" />
            </frame>
        </frame>
    </frame>

    <frame id="minimal" pos="156 78" scale="0.9">
        <label pos="" textsize="1" text="♫" valign="center" textcolor="dddb" opacity="0"/>
        <label id="minimal-text" pos="-1 0" textsize="1" text="Titleinformation" halign="right" scale="0.8" valign="center" textcolor="dddb" opacity="0"/>
    </frame>

    <framemodel id="Song">
        <label pos="0 0" size="78 3" text="Title" textsize="1" textcolor="ffff" />
        <label pos="80 0" size="58 3" text="Artist" textsize="1" textcolor="ffff" />
        <label pos="148 0" size="9 3" text="Length" textsize="1" textcolor="ffff" />
        <quad pos="0 0" size="156 3.7" bgcolor="fff0" ScriptEvents="1" />
    </framemodel>

    <frame id="music-container" pos="-80 45" hidden="1">
        <frame id="list">
            <quad pos="0 2.5" size="160 6" bgcolor="{header_color()|noescape}" />
            <quad pos="0 -2.5" size="160 95" bgcolor="{background_color()|noescape}" opacity="0.5" />
            <quad pos="0 -2.5" size="160 95" style="Bgs1" substyle="BgDialogBlur" />
            <label pos="1.5 0.5" size="20 3" text="Music" textsize="1.2" z-index="2" textcolor="ffff" />
            <quad id="close" pos="157 0.5" size="4 4" halign="center" ScriptEvents="1" />
            <label pos="157 0.5" size="3 3" text="❌" textsize="1.2" z-index="2" halign="center" textcolor="ffff" />

            <frame pos="2 -6" z-index="2">
                <frame pos="0 0">
                    <quad id="sort-by-title" pos="0 0" size="30 3" bgcolor="0000" ScriptEvents="1" />
                    <label pos="3 0" size="78 3" text="Title" textsize="1" textcolor="ffff" />
                    <label class="arrow" pos="0 0.5" text="⏶" textsize="0.7" textcolor="ffff" opacity="0.2" />
                    <label class="arrow" pos="0 -0.5" text="⏷" textsize="0.7" textcolor="ffff" opacity="0.2" />
                </frame>

                <frame pos="80 0">
                    <quad id="sort-by-artist" pos="0 0" size="30 3" bgcolor="0000" ScriptEvents="1" />
                    <label pos="3 0" size="58 3" text="Artist" textsize="1" textcolor="ffff" />
                    <label class="arrow" pos="0 0.5" text="⏶" textsize="0.7" textcolor="ffff" opacity="0.2" />
                    <label class="arrow" pos="0 -0.5" text="⏷" textsize="0.7" textcolor="ffff" opacity="0.2" />
                </frame>

                <label pos="148 0" size="9 3" text="Length" textsize="1" textcolor="ffff" />
            </frame>

            <frame id="song-list" z-index="5" pos="2 -11" size="156 80">
                <frame id="song-list-container" pos="0 0">
                    {for $i = 0; $i < 500; $i++}
                    <frameinstance modelid="Song" class="row" pos="0 {$i * -4}" ScriptEvents="1" hidden="1" />
                    {/for}
                </frame>
            </frame>

            <frame pos="2 -94" z-index="2">
                <quad id="pagination-box" pos="2 0" size="3.5 3.5" bgcolor="{config('colors.ui.header')|noescape}" valign="center" halign="center" z-index="-1" />

                {for $i = 0; $i < 25; $i++}
                <label class="page" pos="{$i * 4 + 2} 0" text="{$i + 1}" size="3.5 3.5" textsize="1" valign="center" halign="center" ScriptEvents="1" />
                {/for}
            </frame>

            <frame pos="118 -94" z-index="3">
                <label pos="-1 0" text="Search:" textsize="1" halign="right" valign="center"/>
                <entry id="search" pos="0 0" size="40 3" default="" textsize="1" valign="center" ScriptEvents="1" />
            </frame>
        </frame>
    </frame>

    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

declare Text[Text][] Songs;
declare Text[Text][] curSongPool;
declare CMlMediaPlayer music;
declare CMlQuad paginationBox;
declare CMlFrame progress;
declare Text url;
declare Text token;
declare Boolean musicEnabled;
declare Boolean loading;

Void startLoading(){
    declare loadingFrame <=> (Page.MainFrame.GetFirstChild("loading") as CMlLabel);
    declare content <=> (Page.MainFrame.GetFirstChild("content") as CMlFrame);
    loadingFrame.Show();
    content.Hide();
    loading = True;
}

Void stopLoading(){
    declare loadingFrame <=> (Page.MainFrame.GetFirstChild("loading") as CMlLabel);
    declare content <=> (Page.MainFrame.GetFirstChild("content") as CMlFrame);
    loadingFrame.Hide();
    content.Show();
    loading = False;
}

Text[Text] getSong(Integer songId){
    if(Songs.count > 0 && songId < Songs.count - 1){
        return Songs[songId];
    }

    return ["id" => "", "title" => "", "artist" => "", "file" => "", "length" => "", "album" => "", "search" => ""];
}

Text[Text] getRandomSong(){
    if(Songs.count > 0){
        return Songs[ML::Rand(0, Songs.count - 1)];
    }

    return ["id" => "", "title" => "", "artist" => "", "file" => "", "length" => "", "album" => "", "search" => ""];
}

Text getUrl(Text[Text] song){
    return url ^ "/index.php?token=" ^ token ^ "&song=" ^ song["file"];
}

Void setSong(Text[Text] song){
    declare url = getUrl(song);

    if(!Http.IsValidUrl(url)){
        log("Invalid URL:" ^ url);
        return;
    }

    startLoading();
    declare request = Http.CreateGet(url, True);

    while(!request.IsCompleted){
        yield;
        progress.RelativeRotation = progress.RelativeRotation + 4.0;
    }

    music.Stop();
    music.Url = url;
    sleep(5);
    music.Play();

    (Page.MainFrame.GetFirstChild("title") as CMlLabel).SetText(song["title"]);
    (Page.MainFrame.GetFirstChild("artist") as CMlLabel).SetText(song["artist"]);
    (Page.MainFrame.GetFirstChild("minimal-text") as CMlLabel).SetText(song["title"] ^ " - " ^ song["artist"]);
    stopLoading();
}

Real getPlayerSpeed(){
    declare Real speed = 0.0;

    if(InputPlayer != Null){
        speed = InputPlayer.Speed * 3.6;

        if(speed < 0){
            return -speed;
        }
    }

    return speed;
}

Void updatePagination(Integer songsVisible){
    declare pages = ML::CeilingInteger(songsVisible / 20.0);

    for(i, 1, pages){
        paginationBox.Parent.Controls[i].Visible = True;
    }
    for(i, pages + 1, 25){
        paginationBox.Parent.Controls[i].Visible = False;
    }
}

Void populateList(Text[Text][] songs){
    declare songList <=> (Page.MainFrame.GetFirstChild("song-list") as CMlFrame);
    declare lastKey = 0;

    foreach(key => song in songs){
        declare frame <=> ((songList.Controls[0] as CMlFrame).Controls[key] as CMlFrame);

        frame.Visible = True;

        (frame.Controls[0] as CMlLabel).SetText(song["title"]);
        (frame.Controls[1] as CMlLabel).SetText(song["artist"]);
        (frame.Controls[2] as CMlLabel).SetText(song["length"]);
        frame.Controls[3].DataAttributeSet("song-id", song["id"]);

        lastKey = key;
    }

    updatePagination(songs.count);

    if(lastKey + 1 < Songs.count){
        for(i, lastKey + 1, Songs.count - 1){
            declare frame <=> ((songList.Controls[0] as CMlFrame).Controls[i] as CMlFrame);

            (frame.Controls[0] as CMlLabel).SetText("");
            (frame.Controls[1] as CMlLabel).SetText("");
            (frame.Controls[2] as CMlLabel).SetText("");
        }
    }
}

Void setRowColor(CMlControl frame, Text color){
    AnimMgr.Add(frame.Parent.Controls[0], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(frame.Parent.Controls[1], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(frame.Parent.Controls[2], "<quad textcolor='" ^ color ^ "f' />", 10, CAnimManager::EAnimManagerEasing::CubicInOut);
}

Text getContainerTarget(Integer page){
    declare pos = page * 80.0;
    declare target = "<frame pos='0 " ^ pos ^ "' />";
    return target;
}

Text slug(Text string){
    declare Text out = TL::ToLowerCase(string);
    out = TL::Replace(out, " ", "");
    return out;
}

Void searchSong(Text search){
    if(TL::Length(search) == 0){
        curSongPool = Songs;
        populateList(Songs);
        return;
    }

    declare Text[Text][] songsFound;
    declare searchStringLength = TL::Length(search);

    foreach(song in Songs){
        declare songTitleLength = TL::Length(song["search"]);

        for(i, 0, songTitleLength - searchStringLength){
            if(TL::SubString(song["search"], i, searchStringLength) == search){
                songsFound.add(song);
                break;
            }
        }
    }

    curSongPool = songsFound;
    populateList(songsFound);

    AnimMgr.Add((Page.MainFrame.GetFirstChild("song-list-container") as CMlFrame), getContainerTarget(0), 200, CAnimManager::EAnimManagerEasing::CubicInOut);
    AnimMgr.Add(paginationBox, "<quad pos='2 0' />", 200, CAnimManager::EAnimManagerEasing::CubicInOut);
}

Text columnToKey(Integer column){
    switch(column){
        case 0: return "artist";
        case 1: return "title";
    }

    return "" ^ column;
}

Text[Text][] arraySort(Text[Text][] array, Integer column){
    declare Text[Integer] SortedColumn;
    declare key = columnToKey(column);

    foreach (I => Data in array) {
        SortedColumn[I] = Data[key];
    }

    SortedColumn = SortedColumn.sort();
    declare Text[Text][] SortedArray;

    foreach (I => Data in SortedColumn) {
        SortedArray.add(array[I]);
    }

    return SortedArray;
}

Text[Text][] arraySortDesc(Text[Text][] array, Integer column){
    declare Text[Text][] SortedArrayDesc;
    declare Text[Text][] SortedArray = arraySort(array, column);

    for(i, 1, SortedArray.count){
        SortedArrayDesc.add(SortedArray[SortedArray.count - i]);
    }

    return SortedArrayDesc;
}

Void updateArrows(CMlControl quad, Integer sortDirection, Integer column){
    foreach(control in (quad.Parent.Parent.Controls[0] as CMlFrame).Controls){
        if(control.HasClass("arrow")){
            (control as CMlLabel).Opacity = 0.2;
        }
    }
    foreach(control in (quad.Parent.Parent.Controls[1] as CMlFrame).Controls){
        if(control.HasClass("arrow")){
            (control as CMlLabel).Opacity = 0.2;
        }
    }

    if(sortDirection == 1){
        (quad.Parent.Controls[3] as CMlLabel).Opacity = 1.0;
    }else{
        (quad.Parent.Controls[2] as CMlLabel).Opacity = 1.0;
    }
}

Text[Text][] parseJson(Text json){
    if(TL::SubString(json, 0, 1) != "[" && TL::SubString(json, TL::Length(json) - 1, 1) != "]"){
        log("Could not load music!");
        musicEnabled = False;
        return [["title" => "", "artist" => "", "file" => "", "length" => "", "album" => "", "search" => ""]];
    }

    declare Text[Text][] songs;
    declare curlyOpen = False;
    declare stringOpen = False;
    declare keyDone = False;
    declare curText = "";
    declare key = "";
    declare value = "";
    declare Text[Text] song;
    declare id = 0;

    for(pos, 1, TL::Length(json) - 2){
        declare character = TL::SubString(json, pos, 1);

        if(character == "{" && !curlyOpen){
            song = ["id" => "", "title" => "", "artist" => "", "file" => "", "length" => "", "album" => "", "search" => ""];
            curlyOpen = True;
            keyDone = False;
            continue;
        }

        if(curlyOpen){
            if(character == "\""){
                stringOpen = !stringOpen;
                continue;
            }

            if(character == ":" && !keyDone && !stringOpen){
                keyDone = True;
                continue;
            }

            if(character == "," && !stringOpen){
                keyDone = False;
                song[key] = value;
                key = "";
                value = "";
                continue;
            }

            if(character == "}"){
                curlyOpen = False;
                song[key] = value;
                key = "";
                value = "";
                song["search"] = slug(song["title"] ^ song["artist"]);
                song["id"] = "" ^ id;
                songs.add(song);
                id = id + 1;
                continue;
            }

            if(keyDone){
                value = value ^ character;
            }else{
                key = key ^ character;
            }
        }
    }

    musicEnabled = True;
    return songs;
}

main() {
    startLoading();
    musicEnabled = False;
    url = "{config('music.url')|noescape}";
    token = {config('music.token')};

    //Get the songlist json
    log("Loading music...");
    declare CHttpRequest getSongList = Http.CreateGet(url ^ "?token=" ^ token);
    wait(getSongList.IsCompleted);
    log("Finished loading music");

    //Parse the json
    Songs = parseJson(getSongList.Result);

    music <=> (Page.MainFrame.GetFirstChild("music") as CMlMediaPlayer);
    paginationBox <=> (Page.MainFrame.GetFirstChild("pagination-box") as CMlQuad);
    progress <=> (Page.MainFrame.GetFirstChild("progress") as CMlFrame);
    declare sortByTitle <=> (Page.MainFrame.GetFirstChild("sort-by-title") as CMlQuad);
    declare sortByArtist <=> (Page.MainFrame.GetFirstChild("sort-by-artist") as CMlQuad);
    declare CMlFrame widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
    declare CMlFrame minimal <=> (Page.MainFrame.GetFirstChild("minimal") as CMlFrame);
    declare CMlFrame widgetControls <=> (Page.MainFrame.GetFirstChild("widget-controls") as CMlFrame);
    declare CMlFrame songList <=> (Page.MainFrame.GetFirstChild("song-list") as CMlFrame);
    declare CMlFrame songListContainer <=> (Page.MainFrame.GetFirstChild("song-list-container") as CMlFrame);
    declare CMlQuad close <=> (Page.MainFrame.GetFirstChild("close") as CMlQuad);
    declare CMlQuad mainFrame <=> (Page.MainFrame.GetFirstChild("main-frame") as CMlQuad);
    declare CMlEntry search <=> (Page.MainFrame.GetFirstChild("search") as CMlEntry);
    declare CMlQuad background <=> (Page.MainFrame.GetFirstChild("background") as CMlQuad);
    declare CMlQuad backgroundIcon <=> (Page.MainFrame.GetFirstChild("icon-background") as CMlQuad);
    declare CMlFrame musicContainer <=> (Page.MainFrame.GetFirstChild("music-container") as CMlFrame);
    declare Text visible = "<frame pos='" ^ widget.DataAttributeGet("pos-visible") ^ "' />";
    declare Text hidden = "<frame pos='" ^ widget.DataAttributeGet("pos-hidden") ^ "' />";
    declare Boolean isHidden = False;
    declare Vec3 startPos;
    declare Integer sortDirection = 1;

    if(!musicEnabled){
        widget.Hide();
        log("Music disabled");
        return;
    }

    stopLoading();

    music.Volume = 1.0;

    curSongPool = Songs;
    populateList(arraySort(curSongPool, 1));
    AnimMgr.Add(widget, visible, 1, CAnimManager::EAnimManagerEasing::ExpInOut);

    declare controlsVisible = False;
    declare musicPlaying = True;

    sleep(100);

    while(True){
        yield;

        if(InputPlayer != Null){
            if(startPos != MapStartLinePos){
                startPos = MapStartLinePos;
                setSong(getRandomSong());
            }

            if(loading){
                progress.RelativeRotation = progress.RelativeRotation + 0.5;
            }

            declare UI_Hide_Speed for InputPlayer = 1.0;
            declare Real speed = InputPlayer.Speed;

            if(speed < 0){
                speed = speed  * -1;
            }

            if(!Map.TMObjective_IsLapRace && InputPlayer.CurrentNbLaps >= 1 || UI_Hide_Speed == 0.0){
                if(speed < UI_Hide_Speed && isHidden){
                    AnimMgr.Add(widget, visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[0], " <label opacity='0.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[1], " <label opacity='0.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = False;
                }
            }else{
                if(speed >= UI_Hide_Speed && !isHidden){
                    AnimMgr.Add(widget, hidden, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[0], " <label opacity='1.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[1], " <label opacity='1.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = True;
                }

                if(speed < UI_Hide_Speed && isHidden){
                    AnimMgr.Add(widget, visible, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[0], " <label opacity='0.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    AnimMgr.Add(minimal.Controls[1], " <label opacity='0.0' /> ", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
                    isHidden = False;
                }
            }

            declare x_min = widget.RelativePosition_V3[0];
            declare x_max = widget.RelativePosition_V3[0] + (mainFrame.Size[0] * widget.RelativeScale);
            declare y_min = widget.RelativePosition_V3[1];
            declare y_max = widget.RelativePosition_V3[1] - (mainFrame.Size[1] * widget.RelativeScale);
            declare Boolean xInBounds = (MouseX > x_min && MouseX < x_max);
            declare Boolean yInBounds = (MouseY < y_min && MouseY > y_max);

            if(!(xInBounds && yInBounds) && controlsVisible){
                controlsVisible = False;
                AnimMgr.Add(widgetControls, " <frame pos='5.0 -10.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
            }
            if((xInBounds && yInBounds) && !controlsVisible){
                controlsVisible = True;
                AnimMgr.Add(widgetControls, " <frame pos='5.0 0.0' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
            }

            foreach(event in PendingEvents){
                if(event.Control == Null){
                    continue;
                }

                if(event.Control.HasClass("skip") && event.Type == CMlScriptEvent::Type::MouseClick){
                    setSong(getRandomSong());
                    continue;
                }

                if(event.Control.HasClass("music-list") && event.Type == CMlScriptEvent::Type::MouseClick){
                    musicContainer.Show();
                    continue;
                }

                if(event.Control == search){
                    searchSong(search.Value);
                    continue;
                }

                if(event.Control == sortByTitle && event.Type == CMlScriptEvent::Type::MouseClick){
                    if(sortDirection == 1){
                        populateList(arraySort(curSongPool, 1));
                    }else{
                        populateList(arraySortDesc(curSongPool, 1));
                    }

                    sortDirection = -sortDirection;
                    updateArrows(event.Control, sortDirection, 1);
                }

                if(event.Control == sortByArtist && event.Type == CMlScriptEvent::Type::MouseClick){
                    if(sortDirection == 1){
                        populateList(arraySort(curSongPool, 0));
                    }else{
                        populateList(arraySortDesc(curSongPool, 0));
                    }

                    sortDirection = -sortDirection;
                    updateArrows(event.Control, sortDirection, 0);
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseClick){
                    declare songId = TL::ToInteger(event.Control.DataAttributeGet("song-id"));
                    setSong(getSong(songId));
                    continue;
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseOver){
                    setRowColor(event.Control, {config('colors.ui.header')});
                    continue;
                }

                if(event.Control.DataAttributeExists("song-id") && event.Type == CMlScriptEvent::Type::MouseOut){
                    setRowColor(event.Control, "fff");
                    continue;
                }

                if(event.Control.HasClass("page") && event.Type == CMlScriptEvent::Type::MouseClick){
                    declare page = TL::ToInteger((event.Control as CMlLabel).Value) - 1;
                    AnimMgr.Add(songListContainer, getContainerTarget(page), 400, CAnimManager::EAnimManagerEasing::CubicInOut);
                    AnimMgr.Add(paginationBox, "<quad pos='" ^ event.Control.RelativePosition_V3[0] ^ " 0' />", 400, CAnimManager::EAnimManagerEasing::CubicInOut);
                    continue;
                }

                if(event.Control == close && event.Type == CMlScriptEvent::Type::MouseClick){
                    musicContainer.Hide();
                    continue;
                }

                if(event.Control == mainFrame && event.Type == CMlScriptEvent::Type::MouseClick){
                    musicContainer.Show();
                    continue;
                }
            }
        }
    }
}
    --></script>
</manialink>