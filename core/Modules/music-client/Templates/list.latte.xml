{contentType text}
{extends 'components.window'}
{php $window_width = 130;}
{php $doNotExit = true;}
{php $startHidden = 1;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}music-list{/block}
    {block icon}♫{/block}
    {block title}Music Library{/block}

    {block content}
    <framemodel id="row">
        <label valign="center" pos="0 0" size="39 3" textsize="0.7" text="Title" textfont="{config('colors.ui.font')|noescape}" />
        <label valign="center" pos="40 0" size="39 3" textsize="0.7" text="Artist" textfont="{config('colors.ui.font')|noescape}" />
        <label valign="center" pos="80 0" size="34 3" textsize="0.7" text="Album" textfont="{config('colors.ui.font')|noescape}" />
        <label valign="center" pos="126 0" size="20 3" textsize="0.7" text="Length" halign="right" textfont="{config('colors.ui.font')|noescape}" />
        <label class="play" valign="center" pos="-2" size="130 3.45" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}0" focusareacolor2="{config('colors.ui.window.header.color')}9" />
    </framemodel>

    <frame>
        <label pos="0 0" size="39 4" textsize="0.9" text="Title" textfont="{config('colors.ui.font')|noescape}" textcolor="{config('colors.ui.window.header.color')}" />
        <label pos="40 0" size="39 4" textsize="0.9" text="Arist" textfont="{config('colors.ui.font')|noescape}" textcolor="{config('colors.ui.window.header.color')}" />
        <label pos="80 0" size="34 4" textsize="0.9" text="Album" textfont="{config('colors.ui.font')|noescape}" textcolor="{config('colors.ui.window.header.color')}" />
        <label pos="126 0" size="20 4" textsize="0.9" text="Length" halign="right" textfont="{config('colors.ui.font')|noescape}" textcolor="{config('colors.ui.window.header.color')}" />

        <frame id="rows" pos="0 -5">
            {for $i=0; $i<19; $i++}
            <frameinstance modelid="row" pos="0 {$i * -3.45}"></frameinstance>
            {/for}
        </frame>

        <frame pos="2 -72" scale="0.9">
            {include 'components.pagination'}
        </frame>

        <frame id="search-frame" pos="100 -72" scale="0.9">
            <label textfont="{config('colors.ui.font')|noescape}" pos="30 0" halign="right" valign="center" textsize="0.9" text="🔍" textcolor="{config('colors.ui.window.text.primary')}"/>
            <entry textfont="{config('colors.ui.font')|noescape}" id="search-input" class="search-input" pos="26.5 0" size="25 3.5" textcolor="{config('colors.ui.window.text.primary')}"
                   halign="right" valign="center" style="TextValueSmall" default="" textsize="1.2"/>
            <label textfont="{config('colors.ui.font')|noescape}" id="clear-search" class="clear-search" pos="0 0" size="3.5 3.5" textcolor="{config('colors.ui.window.text.primary')}"
                   halign="center" valign="center" textsize="0.25" text="" focusareacolor1="{config('colors.ui.window.btn.danger')}6"
                   focusareacolor2="{config('colors.ui.window.btn.danger')}c" ScriptEvents="1" hidden="1"/>
        </frame>
    </frame>
    {/block}

    <script><!--
    {block globals}
    #Struct Song {
        Text title;
        Text artist;
        Text album;
        Text file;
        Text length;
    }

    #Struct MusicLibrary {
        Song[] songs;
        Text server;
    }

    declare Integer perPage;
    declare Integer maxPage;
    declare Integer currentPage;
    declare Song[] currentSelection;
    {/block}

    {block functions}
    Void updateMaxPage(){
        declare pageLabel <=> (Page.MainFrame.GetFirstChild("page-info") as CMlLabel);
        maxPage = ML::CeilingInteger(currentSelection.count / perPage * 1.0);
        pageLabel.Value = (currentPage + 1) ^ "/" ^ maxPage;
    }

    Void fillList(){
        updateMaxPage();
        declare skipped = 0;
        declare toSkip = currentPage * perPage;
        declare i = 0;
        declare rows <=> (Page.MainFrame.GetFirstChild("rows") as CMlFrame);

        foreach(song in currentSelection){
            if(skipped < toSkip){
                skipped += 1;
                continue;
            }

            declare row = (rows.Controls[i] as CMlFrame);
            (row.Controls[0] as CMlLabel).Value = song.title;
            (row.Controls[1] as CMlLabel).Value = song.artist;
            (row.Controls[2] as CMlLabel).Value = song.album;
            (row.Controls[3] as CMlLabel).Value = song.length;
            row.Show();
            row.DataAttributeSet("song", song.tojson());

            i += 1;
            if(i >= perPage){
                break;
            }
        }

        if(i < perPage - 1){
            for(x, i, perPage - 1){
                (rows.Controls[x] as CMlFrame).Hide();
            }
        }
    }

    Void search(Text part){
        declare MusicLibrary musicLib for This;
        declare Song[] tempLib;
        currentPage = 0;

        foreach(song in musicLib.songs){
            declare searchString = song.title ^ " " ^ song.artist ^ " " ^ song.album;
            if(TL::Find(part, searchString, False, False)){
                tempLib.add(song);
            }
        }

        currentSelection = tempLib;
        fillList();
    }
    {/block}

    {block bootScript}
    declare MusicLibrary musicLib for This;
    declare Song ESC_MC_PLAY for This;
    declare resetSearch <=> (Page.MainFrame.GetFirstChild("clear-search") as CMlLabel);
    declare Text SearchSong for This = "";

    wait(musicLib.songs.count > 0);

    perPage = 19;
    currentPage = 0;
    currentSelection = musicLib.songs;
    fillList();
    {/block}

    {block loop}
    if(TL::Length(SearchSong) > 0){
        declare search = TL::Trim(SearchSong);
        if(search == ""){
            currentSelection = musicLib.songs;
            fillList();
            (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).Value = "";
            resetSearch.Hide();
        }else{
            search(TL::Trim(SearchSong));
            (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).Value = TL::Trim(SearchSong);
            resetSearch.Show();
        }
        SearchSong = "";
        window.Show();
    }
    {/block}

    {block pendingEvents}
    if(event.Control.HasClass("previous-page") && event.Type == CMlScriptEvent::Type::MouseClick){
        currentPage -= 1;
        if(currentPage < 0){
            currentPage = maxPage - 1;
        }
        fillList();
    }
    if(event.Control.HasClass("next-page") && event.Type == CMlScriptEvent::Type::MouseClick){
        currentPage += 1;
        if(currentPage >= maxPage){
            currentPage = 0;
        }
        fillList();
    }
    if(event.Control.HasClass("enable-page-input") && event.Type == CMlScriptEvent::Type::MouseClick){
        event.Control.Hide();
        declare pageInput <=> (Page.MainFrame.GetFirstChild("page-input") as CMlEntry);
        pageInput.Value = "";
        pageInput.Show();
        pageInput.StartEdition();
    }
    if(event.Control.HasClass("clear-search") && event.Type == CMlScriptEvent::Type::MouseClick){
        (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).SetText("", True);
    }
    if(event.Control.HasClass("play") && event.Type == CMlScriptEvent::Type::MouseClick){
        declare data = event.Control.Parent.DataAttributeGet("song");
        declare Song song;
        song.fromjson(data);
        ESC_MC_PLAY = song;
    }
    if(event.Control.HasClass("page-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
        declare pageInput = (event.Control as CMlEntry);
        currentPage = TL::ToInteger(pageInput.Value) - 1;
        if(currentPage >= maxPage){
            currentPage = maxPage - 1;
        }
        if(currentPage < 0){
            currentPage = 0;
        }
        pageInput.Hide();
        (Page.MainFrame.GetFirstChild("page-info") as CMlLabel).Show();
        fillList();
    }
    if(event.Control.HasClass("search-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
        declare searchInput = (event.Control as CMlEntry);
        if(TL::Trim(searchInput.Value) == ""){
            currentSelection = musicLib.songs;
            fillList();
            resetSearch.Hide();
        }else{
            search(TL::Trim(searchInput.Value));
            resetSearch.Show();
        }
    }
    {/block}
    --></script>
</manialink>