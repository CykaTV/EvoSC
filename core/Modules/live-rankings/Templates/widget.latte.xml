{contentType text}
{extends 'components.widget-base'}
{php $doNotPause = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}liverankings{/block}
    {block size}44 {config('live-rankings.show',14) * 3 + 6}{/block}

    {block content}
    <quad id="header" pos="0 0" size="44 5" bgcolor="{config('colors.ui.widget.header.color')}e" z-index="-1"/>
    <quad id="bg" pos="0 -5" size="44 200" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" z-index="-1"/>
    <label z-index="1" valign="center" pos="1.5 -2.5" size="44 5" textsize="0.3" text=" Live ranking" textfont="{config('colors.ui.font')|noescape}" />

    <framemodel id="record">
        <label z-index="2" valign="center" halign="right" pos="3 0" size="3 2" textsize="0.4" text="78." textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="1" valign="center" halign="right" pos="13 0" size="12 2" textsize="0.4" text="0:00.000" textcolor="fff4" textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" halign="right" pos="13 0" size="12 2" textsize="0.4" text="0:00.000" textcolor="eeef" textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" pos="14 0" size="23 2" textsize="0.4" text="name name name name name" textfont="{config('colors.ui.font')|noescape}" />
    </framemodel>

    <frame id="ranking" pos="1 -7">
        {for $i=0; $i < config('live-rankings.show',14); $i++}
        <frameinstance modelid="record" pos="0 {$i * -3}" hidden="0"/>
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Integer[CTmScore] GetSortedScores() {
        declare persistent Boolean[Text] LibScoresTable2_Settings for This;
        declare SortedScores = Integer[CTmScore];
        declare Count = 0;

        foreach (Score in Scores) {
            declare LibST_Status for Score.User = C_Status_Disconnected;
            declare Weight = Count;
            if (
                LibScoresTable2_Settings.existskey("SortSpec") &&
                LibScoresTable2_Settings["SortSpec"] &&
                LibST_Status == C_Status_Spectating
            ) Weight += Scores.count;
            if (
                LibScoresTable2_Settings.existskey("SortDisco") &&
                LibScoresTable2_Settings["SortDisco"] &&
                LibST_Status == C_Status_Disconnected
            ) Weight += 2 * Scores.count;
            SortedScores[Score] = Weight;
            Count += 1;
        }

        return SortedScores.sort();
    }

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Void updateSlot(CMlFrame box, Integer rank, CTmScore score){
        declare prefix = "";
		declare LibST_Status for score.User = C_Status_Disconnected;
		if(LibST_Status == C_Status_Disconnected){
            prefix = "$aaa $z";
		}else if(LibST_Status == C_Status_Spectating){
            prefix = "$eee $z";
		}else{
            prefix = "";
		}

        (box.Controls[0] as CMlLabel).Value = rank ^ ".";
        (box.Controls[1] as CMlLabel).Value = formatScoreCorrect(score.BestLap.Time, False);
        (box.Controls[2] as CMlLabel).Value = formatScoreCorrect(score.BestLap.Time, True);
        (box.Controls[3] as CMlLabel).Value = prefix ^ score.User.Name;
        box.Show();
    }

    Void updateList(){
        foreach (Player in Players) {
            declare LibST_LastTick for Player.User = -1;
            LibST_LastTick = Now;
            declare LibST_Status for Player.User = C_Status_Disconnected;
            if (Player.RequestsSpectate && LibST_Status != C_Status_Spectating) {
                LibST_Status = C_Status_Spectating;
            }
            if (!Player.RequestsSpectate && Player.IsSpawned && LibST_Status != C_Status_Spawned) {
                LibST_Status = C_Status_Spawned;
            }
        }

        declare rank = 1;
        declare filled = 0;
        declare boxesFrame <=> (Page.MainFrame.GetFirstChild("ranking") as CMlFrame);
        foreach(Score => Weight in GetSortedScores()){
            if(filled >= boxesFrame.Controls.count){
                return;
            }

            if(Score.BestLap.Time == -1){
                continue;
            }

            declare SlotNeedUpdate = False;
            declare LibST_LastTick for Score.User = -1;
            declare LibST_Status for Score.User = C_Status_Disconnected;
            if (LibST_LastTick != Now && LibST_Status != C_Status_Disconnected) {
                LibST_Status = C_Status_Disconnected;
                SlotNeedUpdate = True;
            }

            declare LibST_PrevStatus for Score.User = C_Status_Disconnected;
            if (LibST_PrevStatus != LibST_Status) {
                LibST_PrevStatus = LibST_Status;
                SlotNeedUpdate = True;
            }

            declare LibST_PrevUpdate for Score = -1;
            declare netread Integer Net_LibST_Update for Score;
            LibST_PrevUpdate = Net_LibST_Update;
            updateSlot((boxesFrame.Controls[rank - 1] as CMlFrame), rank, Score);

            rank += 1;
            filled += 1;
        }

        if(filled < max){
            for(i, filled, max - 1){
                boxesFrame.Controls[i].Hide();
            }
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    #Const C_Status_Disconnected	0
    #Const C_Status_Spawned			1
    #Const C_Status_NotSpawned		2
    #Const C_Status_Spectating		3

    declare Integer max;
    {/block}

    {block bootScript}
        declare lastUpdate = 0;

        max = {config('live-rankings.show',14)};
        updateList();

        left__ = {config('live-rankings.ui.position') == 'left' ? 'True' : 'False'};
        slot__ = {config('live-rankings.ui.slot')};
    {/block}

    {block loop}
        if(GameTime - lastUpdate > 250){
            lastUpdate = GameTime;
            updateList();
        }
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>