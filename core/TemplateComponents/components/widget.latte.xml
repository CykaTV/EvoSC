{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:{include id}" id="{include id}" version="3">
    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL

#Struct UIGrid___ {
    CMlFrame[][Integer] left;
    CMlFrame[][Integer] right;
}

{include globals}

declare CMlFrame widget;
declare CMlQuad bg;
declare Boolean left__;
declare Integer slot__;
--></script>

    <frame pos="0 0" id="widget" size="44 8">
        <quad id="bg" pos="0 0" size="36 8" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" z-index="-1"/>
        <quad id="header" pos="36 0" size="8 8" bgcolor="{config('colors.ui.widget.header.color')}e" z-index="-1"/>

        {include content}
    </frame>

    {if !isset($customHidescript)}
    {include 'scripts.hide'}
    {/if}
    {include script}

    <script><!--
    Real getColumnHeight__(CMlFrame[] column){
        declare maxHeight = 0.0;

        foreach(frame in column){
            if(!frame.Visible){
                continue;
            }

            declare height = frame.Size[1] * frame.RelativeScale;

            if(height > maxHeight){
                maxHeight = height;
            }
        }

        return maxHeight;
    }

    Void rearrange__(UIGrid___ gridd){
        declare CMlFrame[][Integer] column;
        declare Real gutter = 1.0;

        declare width = widget.Size[0] * widget.RelativeScale;
        declare height = widget.Size[1] * widget.RelativeScale;

        if(left__){
            widget.RelativePosition_V3[0] = 0.0;
            column = gridd.left;
        }else{
            widget.RelativePosition_V3[0] = 160.0 - width;
            column = gridd.right;
        }

        declare heights = 0.0;
        declare count = 1;

        for(i, 0, slot__ - 1){
            //heights += getColumnHeight__(column[i]);
            count += 1;
        }

        widget.RelativePosition_V3[1] = 90.0 - slot__*8.0 - (gutter * count) + 9.0;

        hidescript_setup();
    }

    main() {
        declare UIGrid___ gridd for This;
        declare Integer LastUiUpdate for This = 0;
        declare Integer lastUiUpdate;

        if(LastUiUpdate == 0){
            LastUiUpdate = GameTime;
            lastUiUpdate = LastUiUpdate;
        }

        widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        bg <=> (Page.MainFrame.GetFirstChild("bg") as CMlQuad);

        if(left__){
            if(!gridd.left.existskey(slot__)){
                gridd.left[slot__] = CMlFrame[];
            }
            gridd.left[slot__].add(widget);
        }else{
            if(!gridd.right.existskey(slot__)){
                gridd.right[slot__] = CMlFrame[];
            }
            gridd.right[slot__].add(widget);
        }

        rearrange__(gridd);
        LastUiUpdate = GameTime;

        {include bootScript}

        while(True){
            yield;

            foreach(event in PendingEvents){
                if(event.Control == Null) continue;

                {include pendingEvents}
            }

            {include loop}

            {if !isset($customHidescript)}
            hidescript();
            {/if}

            if(lastUiUpdate != LastUiUpdate){
                lastUiUpdate = LastUiUpdate;
                rearrange__(gridd);
            }
        }
    }
    --></script>
</manialink>