<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:Dedimania" id="Dedimania2" version="3">
    <framemodel id="record">
        <label z-index="2" valign="center" halign="right" pos="3.5 0" size="3 2" textsize="0.6" text="78."/>
        <label z-index="2" valign="center" pos="4 0" size="8 2" textsize="0.8" text="0:00.000" textcolor="eee"/>
        <label z-index="2" valign="center" pos="13 0" size="25 2" textsize="0.4" text="name name name name name"/>
        <quad pos="-1 -0.2" size="40 3" bgcolor="{config('colors.ui.header')}" opacity="0.3" z-index="1" hidden="1" valign="center" />
    </framemodel>

    <frame id="widget" pos="{config('dedimania.pos')}" size="40 60" scale="{config('dedimania.scale')}">
        <quad z-index="-1" size="40 60" bgcolor="{config('colors.ui.background')}" opacity="0.8"/>
        <quad size="40 5" bgcolor="{config('colors.ui.header')}" opacity="0.8"/>
        <label z-index="1" valign="center" pos="1.5 -2.5" textsize="0.4" text="🏆 Dedimania"/>

        <frame id="records-frame" pos="1 -7">
            <frame id="records">
                {for $i=0; $i<100; $i++}
                <frameinstance modelid="record" pos="0 {$i * -3}"/>
                {/for}
            </frame>
        </frame>
    </frame>

    <frame id="window" pos="-90 60">
        <quad size="180 6" bgcolor="{config('colors.ui.header')}" opacity="0.9" z-index="0" />
        <quad size="180 120" pos="0 -6" bgcolor="{config('colors.ui.background')}" opacity="0.8" z-index="0" />
        <label pos="2 -3" valign="center" textsize="1" text="Dedimania records" z-index="1" />
        <quad id="close" pos="176 -3" size="4 4" halign="center" ScriptEvents="1" />
        <label pos="176 -3" size="3 3" text="❌" textsize="1.2" z-index="2" halign="center" valign="center" textcolor="ffff" />

        <frame id="window-records" z-index="2" pos="2 -9">
            {for $i=0; $i<100; $i++}
            <frame pos="{floor($i/25) * 44} {($i%25) * -3}" id="record-login-{$i}" data-id="{$i}">
                <label z-index="2" valign="center" halign="right" pos="3.5 0" size="3 2" textsize="0.6" text="78."/>
                <label z-index="2" valign="center" pos="4 0" size="8 2" textsize="0.8" text="0:00.000" textcolor="eee"/>
                <label z-index="2" valign="center" pos="13 0" size="9 2" textsize="0.4" text="login login"/>
                <label z-index="2" valign="center" pos="23 0" size="20 2" textsize="0.4" text="name name name name name"/>
                <quad class="record-login" pos="-1 -0.2" size="44 3" bgcolor="{config('colors.ui.header')}" opacity="0" z-index="3" valign="center" ScriptEvents="1" />
            </frame>
            {/for}
        </frame>

        <frame z-index="1" pos="2 -84">
            <quad size="176 40" bgcolor="0006" />
            <graph id="graph" size="176 30" pos="0 -10" z-index="3" />
        </frame>

        <frame z-index="2" id="my-bubbles" pos="2 -124" hidden="0">
            {for $i=1; $i<count($localCps); $i++}
            <frame pos="{(176 / (count($localCps) - 1)) * $i} 0">
                <quad pos="0 -2" size="1.5 0.3" bgcolor="888f" valign="center" halign="center" rot="45" />
                <label pos="1 -5" valign="center" halign="left" text="time" textsize="0.2" />
                <label pos="1 -4" valign="bottom" halign="left" text="nick" textsize="1" scale="0.5" />
            </frame>
            {/for}
        </frame>

        <frame z-index="3" id="target-bubbles" pos="2 -124">
            {for $i=1; $i<$cpCount; $i++}
            <frame pos="{((176 / ($cpCount - 1)) * $i) - 2} 0">
                <quad pos="0 1" size="1.5 0.3" bgcolor="f00f" valign="center" halign="center" rot="45" />
                <label pos="-1 3" valign="center" halign="right" text="time" textsize="0.2" />
                <label pos="-1 4" valign="bottom" halign="right" text="nick" textsize="1" scale="0.5" />
            </frame>
            {/for}
        </frame>
    </frame>

    <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL

    declare Text[Text][Integer] Records;
    declare Integer LocalRank;
    declare Integer[] LocalCps;
    declare CMlGraphCurve targetCurve;

    Void updateList(){
        declare recordsFrame <=> (Page.MainFrame.GetFirstChild("records") as CMlFrame);

        for(i, 1, Records.count){
            declare Text[Text] record = Records[i];
            declare recordLabels = (recordsFrame.Controls[i - 1] as CMlFrame);

            (recordLabels.Controls[0] as CMlLabel).SetText(i ^ ".");
            (recordLabels.Controls[1] as CMlLabel).SetText(record["score"]);
            (recordLabels.Controls[2] as CMlLabel).SetText(record["nick"]);

            declare recordLoginLabels = (Page.MainFrame.GetFirstChild("record-login-" ^ (i - 1)) as CMlFrame);
            (recordLoginLabels.Controls[0] as CMlLabel).SetText(i ^ ".");
            (recordLoginLabels.Controls[1] as CMlLabel).SetText(record["score"]);
            (recordLoginLabels.Controls[2] as CMlLabel).SetText(record["login"]);
            (recordLoginLabels.Controls[3] as CMlLabel).SetText(record["nick"]);
            recordLoginLabels.Visible = True;
        }

        for(i, Records.count, 100){
            declare recordLoginLabels = (Page.MainFrame.GetFirstChild("record-login-" ^ (i - 1)) as CMlFrame);
            recordLoginLabels.Visible = False;
        }
    }

    Void scrollToLocalRankPosition(){
        declare recordsFrame <=> (Page.MainFrame.GetFirstChild("records") as CMlFrame);
        declare Real relativeRankPos = LocalRank / 100.0;

        declare Real y = LocalRank * 3.0 - 30.0;
        declare Text targetPos = """ <frame pos="0 """ ^ y ^ """" /> """;
        AnimMgr.Add(recordsFrame, targetPos, 800, CAnimManager::EAnimManagerEasing::QuartOut);

        ((recordsFrame.Controls[LocalRank - 1] as CMlFrame).Controls[3] as CMlQuad).Visible = True;
    }

    Void showCps(CMlFrame record){
        declare targetBubbles <=> (Page.MainFrame.GetFirstChild("target-bubbles") as CMlFrame);
        declare id = TL::ToInteger(record.DataAttributeGet("id")) + 1;
        declare score = TL::ToInteger(Records[id]["score_raw"]);
        declare cpTimes = TL::Split(",", Records[id]["cps"]);

        targetCurve.Points[0] = <0.0, 0.0>;
        for(i, 0, cpTimes.count - 1){
            targetCurve.Points[i + 1] = <i * 1.0, TL::ToInteger(cpTimes[i]) * 1.0>;

            if(i > 0){
                declare CMlFrame bubble = (targetBubbles.Controls[i - 1] as CMlFrame);
                bubble.RelativePosition_V3[1] = (TL::ToReal(cpTimes[i]) / score) * 30.0;

                declare Integer time = TL::ToInteger(cpTimes[i]);
                (bubble.Controls[1] as CMlLabel).SetText(TL::TimeToText(time, True));
                (bubble.Controls[2] as CMlLabel).SetText(TL::StripFormatting(Records[id]["nick"]));
            }
        }
    }

    main(){
        Records = {$records|noescape};
        LocalRank = {$localRank|noescape};

        declare widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        declare recordsFrame <=> (Page.MainFrame.GetFirstChild("records-frame") as CMlFrame);
        declare window <=> (Page.MainFrame.GetFirstChild("window") as CMlFrame);
        declare close <=> (Page.MainFrame.GetFirstChild("close") as CMlQuad);
        declare myBubbles <=> (Page.MainFrame.GetFirstChild("my-bubbles") as CMlFrame);

        recordsFrame.ClipWindowActive = True;
        recordsFrame.ClipWindowRelativePosition = <20.0, -25.6>;
        recordsFrame.ClipWindowSize = <55.0, 54.6>;

        updateList();

        if(LocalRank != -1){
            scrollToLocalRankPosition();
        }

        declare Boolean hidden = False;
        declare Real width = widget.Size[0];

        declare Vec2 vecVisible = widget.RelativePosition_V3;
        declare Vec2 vecHidden = widget.RelativePosition_V3;

        if(vecVisible[0] < 0.0){
            vecHidden[0] = vecVisible[0] - width;
        }else{
            vecHidden[0] = vecVisible[0] + width;
        }

        declare Text visiblePos = """ <frame pos=" """ ^ vecVisible[0] ^ " " ^ vecVisible[1] ^ """ " /> """;
        declare Text hiddenPos = """ <frame pos=" """ ^ vecHidden[0] ^ " " ^ vecHidden[1] ^ """ " /> """;

        //graph
        declare CMlGraph graph = (Page.GetFirstChild("graph") as CMlGraph);
        declare Real graphMaxHeight = TL::ToInteger(Records[Records.count - 1]["score_raw"]) * 1.0;

        declare myCurve = graph.AddCurve();
        myCurve.Color = <0.8, 0.8, 0.8>;
        myCurve.Width = 0.2;
        {if count($localCps) > 0}
            myCurve.Points.add(<0.0, 0.0>);
            {foreach $localCps as $key => $localCp}
                myCurve.Points.add(<{$key|noescape} * 1.0, {$localCp|noescape} * 1.0>);

                if({$key} > 0){
                    (myBubbles.Controls[{$key-1}] as CMlFrame).RelativePosition_V3[1] = ({$localCp|noescape}.0 / graphMaxHeight) * 30.0;
                    ((myBubbles.Controls[{$key-1}] as CMlFrame).Controls[1] as CMlLabel).SetText(TL::TimeToText({$localCp|noescape}, True));
                    ((myBubbles.Controls[{$key-1}] as CMlFrame).Controls[2] as CMlLabel).SetText(TL::StripFormatting(InputPlayer.User.Name));
                }
            {/foreach}
        {/if}

        declare Integer cpCount = TL::Split(",", Records[1]["cps"]).count;
        graph.CoordsMin = <0., 0.>;
        graph.CoordsMax = <((cpCount - 1) * 1.0), graphMaxHeight>;
        targetCurve = graph.AddCurve();
        targetCurve.Color = <1.0, 0.2, 0.2>;
        targetCurve.Width = 0.2;
        for(i, 0, cpCount){
	        targetCurve.Points.add(<1. * i, 0.>);
        }

        while(True){
            yield;

            if(InputPlayer == Null){
                wait(InputPlayer != Null);
            }

            declare HideSpeed for InputPlayer = 1.0;
            declare speed = ML::Abs(InputPlayer.Speed);

            if(speed >= HideSpeed && !hidden){
                hidden = True;
                AnimMgr.Add(widget, hiddenPos, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }

            if(speed < HideSpeed && hidden){
                hidden = False;
                AnimMgr.Add(widget, visiblePos, 800, CAnimManager::EAnimManagerEasing::ExpInOut);
            }

            foreach(event in PendingEvents){
                if(event.Control == Null){
                    continue;
                }

                if(event.Control.HasClass("record-login")){
                    showCps(event.Control.Parent);
                    continue;
                }

                if(event.Control == close){
                    window.Hide();
                }
            }
        }
    }

    --></script>
</manialink>