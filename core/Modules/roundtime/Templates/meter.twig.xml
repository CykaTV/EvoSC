<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:roundtime" id="roundtime" version="3">
    <frame id="speedometer" z-index="100">
        <label id="speed" pos="0 0" text="..." halign="right" valign="center" textsize="5.5" textprefix="$s" textfont="RajdhaniMono"/>
        <label id="label" pos="0.5 -1.5" text="RoundTime" halign="left" valign="center" textsize="1.8" textprefix="$s" textfont="RajdhaniMono"/>
        <label class="action" pos="-27 2.5" size="46 6.5" focusareacolor1="0000" focusareacolor2="{{ config('colors.ui.header') }}c" ScriptEvents="1" />
        <label z-index="5" id="wrench" pos="-24 0.5" text="" halign="right" valign="center" textsize="0.5" textprefix="$s" textfont="RajdhaniMono" hidden="1"/>
    </frame>

    <frame id="settings" pos="-20 7" hidden="1">
        <quad id="handle" z-index="5" size="35 5" />
        <quad z-index="-1" size="40 5" bgcolor="{{ config('colors.ui.header') }}c" />
        <quad z-index="-1" size="40 14" pos="0 -5" bgcolor="{{ config('colors.ui.background') }}c" />
        <label class="close" pos="37.5 -2.5" size="5 5" halign="center" valign="center" textsize="0.5" text="" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0003" />
        <label pos="1 -2.5" size="30 5" halign="left" valign="center" textsize="0.3" text=" RoundTime Settings" textfont="RajdhaniMono" />

        <label pos="2 -7.5" size="30 5" halign="left" valign="center" textsize="0.3" text="Show label" textfont="RajdhaniMono" />
        <label id="label-disabled" class="label-disabled" pos="15 -7.5" size="3 3" halign="center" valign="center" textsize="0.3" text="" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{{ config('colors.ui.header') }}3" textfont="RajdhaniMono" textcolor="9999" />
        <label id="label-enabled" class="label-enabled" pos="15 -7.5" size="3 3" halign="center" valign="center" textsize="0.3" text="" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{{ config('colors.ui.header') }}3" textfont="RajdhaniMono" textcolor="{{ config('colors.ui.header') }}f" />

        <label pos="2 -11.5" size="30 5" halign="left" valign="center" textsize="0.3" text="Scale" textfont="RajdhaniMono" />
        <entry id="entry-scale" class="entry" pos="14 -10.5" size="15 3" textsize="0.5" />

        <label pos="2 -15.5" size="30 5" halign="left" valign="center" textsize="0.3" text="Position" textfont="RajdhaniMono" />
        <label pos="14 -15.5" size="30 5" halign="left" valign="center" textsize="0.3" text="$iDrag the widget" textcolor="fffc" textfont="RajdhaniMono" />
    </frame>

    <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL

    #Struct RoundTimeSettings {
        Boolean showLabel;
        Vec2 position;
        Real scale;
    }

    {{ (new esc\Classes\ManiaLinkDrag()) }}

    main(){
        declare persistent RoundTimeSettings settings_roundtime;

        declare player <=> InputPlayer;
        declare labelEnabled <=> (Page.MainFrame.GetFirstChild("label-enabled") as CMlLabel);
        declare labelDisabled <=> (Page.MainFrame.GetFirstChild("label-disabled") as CMlLabel);
        declare speedLabel <=> (Page.MainFrame.GetFirstChild("speed") as CMlLabel);
        declare labelLabel <=> (Page.MainFrame.GetFirstChild("label") as CMlLabel);
        declare wrench <=> (Page.MainFrame.GetFirstChild("wrench") as CMlLabel);
        declare scaleEntry <=> (Page.MainFrame.GetFirstChild("entry-scale") as CMlEntry);
        declare speedometer <=> (Page.MainFrame.GetFirstChild("speedometer") as CMlFrame);
        declare settingsFrame <=> (Page.MainFrame.GetFirstChild("settings") as CMlFrame);
        declare Boolean hidden = False;
        declare Boolean settingsVisible = False;

        if(settings_roundtime.scale == 0.0){
            settings_roundtime.showLabel = True;
            settings_roundtime.position = <80.0, -86.0>;
            settings_roundtime.scale = 1.0;
        }

        speedometer.RelativeScale = settings_roundtime.scale;
        labelLabel.Visible = settings_roundtime.showLabel;
        speedometer.RelativePosition_V3 = settings_roundtime.position;

        while(True){
            yield;

            wait(player != Null);

            speedLabel.SetText(TL::TimeToText(player.CurLap.Time, True));

            if(!hidden && player.CurLap.Time == -1 && player.RaceState != CTmMlPlayer::ERaceState::BeforeStart){
                speedometer.Hide();
                hidden = True;
            }
            if((hidden && player.CurLap.Time != -1) || (hidden && player.RaceState == CTmMlPlayer::ERaceState::BeforeStart)){
                speedometer.Show();
                hidden = False;
            }

            if(!hidden){
                foreach(event in PendingEvents){
                    if(event.Control == Null){
                        continue;
                    }

                    if(event.Control.HasClass("label-disabled") && event.Type == CMlScriptEvent::Type::MouseClick){
                        labelEnabled.Show();
                        labelDisabled.Hide();
                        settings_roundtime.showLabel = True;
                        labelLabel.Show();
                    }
                    if(event.Control.HasClass("label-enabled") && event.Type == CMlScriptEvent::Type::MouseClick){
                        labelEnabled.Hide();
                        labelDisabled.Show();
                        settings_roundtime.showLabel = False;
                        labelLabel.Hide();
                    }
                    if(event.Control.HasClass("close") && event.Type == CMlScriptEvent::Type::MouseClick){
                        settingsFrame.Hide();
                        settingsVisible = False;
                    }
                    if(event.Control.HasClass("action") && event.Type == CMlScriptEvent::Type::MouseClick){
                        if(settingsVisible){
                            declare startPos = speedometer.RelativePosition_V3;
                            declare startX = MouseX;
                            declare startY = MouseY;

                            while(MouseLeftButton){
                                yield;

                                declare newPosX = startPos[0] + (MouseX - startX);
                                declare newPosY = startPos[1] + (MouseY - startY);

                                speedometer.RelativePosition_V3 = <newPosX, newPosY>;
                                settings_roundtime.position = speedometer.RelativePosition_V3;
                            }

                            continue;
                        }

                        if(settings_roundtime.showLabel){
                            labelEnabled.Show();
                            labelDisabled.Hide();
                        }else{
                            labelEnabled.Hide();
                            labelDisabled.Show();
                        }
                        scaleEntry.SetText(settings_roundtime.scale ^ "", False);
                        settingsFrame.Show();
                        settingsVisible = True;
                    }
                    if(event.Control.HasClass("action") && event.Type == CMlScriptEvent::Type::MouseOver){
                        wrench.Show();
                    }
                    if(event.Control.HasClass("action") && event.Type == CMlScriptEvent::Type::MouseOut){
                        wrench.Hide();
                    }
                    if(event.Control.HasClass("entry") && event.Type == CMlScriptEvent::Type::EntrySubmit){
                        settings_roundtime.scale = TL::ToReal(scaleEntry.Value);

                        if(settings_roundtime.scale < 0){
                            settings_roundtime.scale = -settings_roundtime.scale;
                        }
                        if(settings_roundtime.scale < 0.4){
                            settings_roundtime.scale = 0.4;
                        }

                        scaleEntry.SetText(settings_roundtime.scale ^ "", False);
                        speedometer.RelativeScale = settings_roundtime.scale;
                    }
                }

                if(settingsVisible){
                    maniaLinkDrag();
                }
            }
        }
    }
    --></script>
</manialink>