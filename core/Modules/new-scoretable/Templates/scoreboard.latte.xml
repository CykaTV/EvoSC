<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:ScoreTable" layer="ScoresTable" id="ScoreTable" version="3">
    <stylesheet>
        <style class="label" textfont="{config('colors.ui.font')|noescape}" textcolor="fff" textsize="1" />
        <style class="button" textfont="{config('colors.ui.font')|noescape}" textcolor="fff" textsize="0.05" size="10 5.5" focusareacolor1="fff1" focusareacolor12="fff3" autonewline="1" />
        <style class="bg-window" bgcolor="{config('colors.ui.window.bg.color')|noescape}" opacity="{config('colors.ui.window.bg.opacity')|noescape}" />
    </stylesheet>

    <framemodel id="box" size="86 12">
        <label class="label" pos="25 -2.5" size="25 3" scale="1.3" textprefix="$fff" textcolor="fff" z-index="10" /> <!-- Name -->
        <label class="label" pos="64.25 -7.5" scale="0.9" size="3 3" textcolor="fff" valign="center" halign="center" text="" opacity="0.85" /> <!-- Group Icon -->
        <frame size="15 10" pos="9.3 -5.6" halign="center" valign="center" z-index="-1" scale="1.1">
            <quad pos="-3 5" size="50 7" style="Bgs1" substyle="BgDialogBlur" halign="center" valign="center" rot="-45" z-index="-2" opacity="0.65" />
            <label pos="-4.9 2.75" size="5 5" halign="center" valign="center" text="" textsize="1" scale="0.7" textcolor="666" />
        </frame> <!-- Badge -->
        <label class="label" pos="6.85 -5.5" textprefix="" size="10 10" textsize="1.1" scale="2" halign="center" valign="center" text="" opacity="1" textcolor="fff" /> <!-- Rank -->
        <label class="label" pos="36 -7" size="11 3" scale="1" textcolor="fff" halign="right" /> <!-- Score -->
        <quad pos="15 -6" valign="center" size="8 8" /> <!-- Avatar -->
        <quad pos="63 -4" bgcolor="0002" size="2.5 2" valign="center" opacity="0.85" /> <!-- Flag -->
        <label class="label" pos="66.25 -3.8" scale="0.9" textcolor="fff" valign="center" opacity="0.75" text="Region: Rank" /> <!-- Region -->
        <label class="label" pos="66.25 -7.5" scale="0.9" textcolor="fff" valign="center" text="Player" opacity="0.75" /> <!-- Group -->
        <label class="label" pos="19 -9.75" scale="0.6" textcolor="fffa" halign="center" valign="center" textprefix="$s" text="" opacity="0.85" z-index="2" /> <!-- Fame Stars -->
        <label class="label" pos="36 -7" size="11 3" scale="1" textcolor="{config('colors.ui.window.header.color')|noescape}4" halign="right" /> <!-- Score BG -->

        <quad style="Bgs1" substyle="BgDialogBlur" pos="1 0" size="86 12" z-index="-12" opacity="0" /> <!-- Primary BG -->
        <quad class="bg-window" pos="1 0" size="86 12" z-index="-10" opacity="0.6" ScriptEvents="1" /> <!-- Primary BG -->
        <quad class="bg-window" pos="1 0" size="12 12" z-index="-11" opacity="0.15" /> <!-- Rank BG -->
        <quad class="trigger" pos="1 0" size="86 12" bgcolor="0000" z-index="5" ScriptEvents="1" /> <!-- Controls Trigger -->

        <frame pos="8 -7.75" hidden="1" z-index="10">
            <label class="button spec"       data-color="" data-icon="" text="Spec" ScriptEvents="1" halign="center" valign="center" />
            <label class="button profile"    data-color="" data-icon="" text="Profile" ScriptEvents="1" halign="center" valign="center" />
            <label class="button pm"         data-color="" data-icon="" text="PM" ScriptEvents="1" halign="center" valign="center" />
            <label class="button mute"       data-color="" data-icon="" text="Mute" ScriptEvents="1" halign="center" valign="center" />
            <label class="button ban"        data-color="" data-icon="" text="Ban" ScriptEvents="1" halign="center" valign="center" />
            <label class="button kick"       data-color="" data-icon="" text="Kick" ScriptEvents="1" halign="center" valign="center" />
            <label class="button force_spec" data-color="" data-icon="" text="Force Spec" ScriptEvents="1" halign="center" valign="center" />
        </frame>
    </framemodel>

    <!-- end components -->

    <frame id="main-frame" pos="-86 32">
        {if !empty($logoUrl)}
        <quad pos="170 11" bgcolor="000" valign="center" halign="right" size="{config('scoreboard.logo-dimensions')}" image="{$logoUrl|noescape}" scale="0.8" />
        {/if}
        <label id="server-name" class="label" pos="1 15" size="60 6" scale="2" />
        <label id="mode-name" class="label" pos="1 9" size="60 6" scale="1.2" textprefix="$sMode: " />
        <label id="player-info" class="label" pos="1.1 4.8" size="60 6" scale="1" textprefix="$s " />
        <frame id="boxes-frame">
            {for $i=0;$i<6;$i++}
            <frameinstance modelid="box" pos="-0.5 {$i * -13}"></frameinstance>
            {/for}
            {for $i=0;$i<6;$i++}
            <frameinstance modelid="box" pos="85.5 {$i * -13}"></frameinstance>
            {/for}
            {for $i=0;$i<6;$i++}
            <quad class="bg-window" pos="0.5 {$i * -13}" size="85 12" z-index="-10" opacity="0.15" />
            {/for}
            {for $i=0;$i<6;$i++}
            <quad class="bg-window" pos="86.5 {$i * -13}" size="85 12" z-index="-10" opacity="0.15" />
            {/for}
        </frame>
    </frame>

    <script><!--
    #Const SB_Update_Interval 250
    #Const SB_Button_Padding 1

    declare CMlFrame mainFrame;
    declare CMlFrame[] boxes;

    Text getStars(Integer count){
        declare Text stars = "";
        for(i, 0, count - 1){
            stars = stars ^ " ";
        }
        return stars;
    }

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Void updateBox(CMlFrame box, CTmScore score, Integer rank){
        declare CUser user <=> score.User;
        declare nameLabel <=> (box.Controls[0] as CMlLabel);
        declare groupIconLabel <=> (box.Controls[1] as CMlLabel);
        declare badgeQuad <=> ((box.Controls[2] as CMlFrame).Controls[0] as CMlQuad);
        declare badgeLabel <=> ((box.Controls[2] as CMlFrame).Controls[1] as CMlLabel);
        declare rankLabel <=> (box.Controls[3] as CMlLabel);
        declare scoreLabel <=> (box.Controls[4] as CMlLabel);
        declare scoreBgLabel <=> (box.Controls[10] as CMlLabel);
        declare avatarQuad <=> (box.Controls[5] as CMlQuad);
        declare flagQuad <=> (box.Controls[6] as CMlQuad);
        declare regionLabel <=> (box.Controls[7] as CMlLabel);
        declare groupLabel <=> (box.Controls[8] as CMlLabel);
        declare fameStarsLabel <=> (box.Controls[9] as CMlLabel);

        badgeQuad.Hide();
        badgeLabel.Value = "";
        rankLabel.Value = "" ^ rank;
        nameLabel.Value = user.Name;
        scoreBgLabel.Value = formatScoreCorrect(score.BestLap.Time, False);
        scoreLabel.Value = formatScoreCorrect(score.BestLap.Time, True);
        avatarQuad.ImageUrl = "file://Avatars/" ^ user.Login ^ "/Default";
        flagQuad.ImageUrl = "file://ZoneFlags/Login/" ^ user.Login ^ "/country";
        regionLabel.Value = user.LadderZoneName ^ ": " ^ user.LadderRank;
        fameStarsLabel.Value = getStars(user.FameStars);
        box.Show();
        box.DataAttributeSet("login", user.Login);
    }

    Void updateScoreTable(){
        (Page.MainFrame.GetFirstChild("server-name") as CMlLabel).Value = CurrentServerName;
        (Page.MainFrame.GetFirstChild("mode-name") as CMlLabel).Value = CurrentServerModeName;
        (Page.MainFrame.GetFirstChild("player-info") as CMlLabel).Value = Players.count ^ "/{$maxPlayers}";

        declare rank = 1;
        declare filled = 0;
        foreach(Key => Score in Scores){
            if(Key >= boxes.count){
                return;
            }

            updateBox(boxes[Key], Score, rank);
            rank += 1;
            filled += 1;
        }

        if(filled < 12){
            for(i, filled, 11){
                boxes[i].Hide();
            }
        }
    }

    Void setupButtons(CMlFrame box){
        declare buttonsFrame <=> (box.Controls[15] as CMlFrame);
        declare widths = 0.0;
        foreach(Control in buttonsFrame.Controls){
            declare buttonLabel <=> (Control as CMlLabel);

            if(buttonLabel.DataAttributeGet("icon") != ""){
                buttonLabel.Value = buttonLabel.DataAttributeGet("icon") ^ "\n" ^ buttonLabel.Value;
                buttonLabel.DataAttributeSet("icon", "");
            }
            if(buttonLabel.DataAttributeGet("color") != ""){

                buttonLabel.DataAttributeSet("color", "");
            }

            if(buttonLabel.Visible){
                declare Real width = buttonLabel.Size[0];
                buttonLabel.RelativePosition_V3[0] = widths;
                widths += width + SB_Button_Padding;
            }
        }
    }

    Void showControls(CMlFrame _box){
        declare CMlFrame box = _box;
        setupButtons(box);
        AnimMgr.Add((box.Controls[3] as CMlLabel), "<label pos='5 -2.4' scale='0.85' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[4] as CMlLabel), "<label pos='19 -1.5' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[10] as CMlLabel), "<label pos='19 -1.5' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[0] as CMlLabel), "<label pos='20 -1.5' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[1] as CMlLabel), "<label pos='44 -2.5' scale='0.8' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[8] as CMlLabel), "<label pos='46 -2.5' scale='0.8' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[6] as CMlLabel), "<label pos='63 -2.5' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[7] as CMlLabel), "<label pos='66.25 -2.5' scale='0.8' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add(box.Controls[5], "<label opacity='0.0' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        box.Controls[15].Show();
        box.Controls[13].Hide();

        declare Real xMin = box.AbsolutePosition_V3[0];
        declare Real xMax = box.AbsolutePosition_V3[0] + box.Size[0];
        declare Real yMin = box.AbsolutePosition_V3[1] - box.Size[1];
        declare Real yMax = box.AbsolutePosition_V3[1];

        while(MouseX > xMin && MouseX < xMax && MouseY < yMax && MouseY > yMin){
            foreach(Event in PendingEvents){
                if(Event.Control == Null) continue;
                if(Event.Control.HasClass("button") && Event.Type == CMlScriptEvent::Type::MouseClick){
                    declare buttonLabel <=> (Event.Control as CMlLabel);
                    declare targetLogin = buttonLabel.Parent.Parent.DataAttributeGet("login");

                    if(Event.Control.HasClass("spec")){
                        TriggerPageAction("spec," ^ targetLogin);
                    }
                    if(Event.Control.HasClass("mute")){
                        TriggerPageAction("mute," ^ targetLogin);
                    }
                    if(Event.Control.HasClass("kick")){
                        TriggerPageAction("kick," ^ targetLogin);
                    }
                    if(Event.Control.HasClass("force_spec")){
                        TriggerPageAction("forcespec," ^ targetLogin);
                    }
                    if(Event.Control.HasClass("ban")){
                        TriggerPageAction("ban," ^ targetLogin);
                    }
                    if(Event.Control.HasClass("profile")){
                        ShowProfile(targetLogin);
                    }
                }
            }

            yield;
        }


        AnimMgr.Add((box.Controls[3] as CMlLabel), "<label pos='6.85 -5.5' scale='2' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[4] as CMlLabel), "<label pos='36 -7' scale='1' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[10] as CMlLabel), "<label pos='36 -7' scale='1' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[0] as CMlLabel), "<label pos='25 -2.5' scale='1.3' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[1] as CMlLabel), "<label pos='64.25 -7.5' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[8] as CMlLabel), "<label pos='66.25 -7.5' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[6] as CMlLabel), "<label pos='63 -4' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add((box.Controls[7] as CMlLabel), "<label pos='66.25 -3.8' scale='0.9' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add(box.Controls[5], "<label opacity='1.0' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        box.Controls[15].Hide();
        box.Controls[13].Show();
    }

    main() {
        declare SB_Last_Update = 0;

        mainFrame <=> (Page.MainFrame.GetFirstChild("main-frame") as CMlFrame);
        boxes = CMlFrame[];

        foreach(Control in (Page.MainFrame.GetFirstChild("boxes-frame") as CMlFrame).Controls){
            boxes.add((Control as CMlFrame));
        }

        while(True){
            yield;

            if(GameTime - SB_Last_Update > SB_Update_Interval){
                updateScoreTable();
            }

            foreach(Event in PendingEvents){
                if(Event.Control == Null) continue;

                if(Event.Control.HasClass("trigger") && Event.Type == CMlScriptEvent::Type::MouseOver){
                    showControls((Event.Control.Parent as CMlFrame));
                }
            }
        }
    }
    --></script>
</manialink>