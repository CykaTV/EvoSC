{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="ESC:Maps:main" id="esc_maps" version="3">
    <framemodel id="Map">
        <quad valign="center" pos="-2 0" size="200 4.5" bgcolor="{config('colors.ui.window.header.color')|noescape}" opacity="0"/>
        <label pos="1 0" valign="center" size="40 3" text="map name lol asdfasdasdsad" textcolor="{config('colors.ui.window.text.primary')}"
               textsize="0.6" z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="52 0" valign="center" size="30 3" text="map author name comes here" textcolor="{config('colors.ui.window.text.primary')}"
               textsize="0.6" z-index="1" textfont="{config('colors.ui.font')|noescape}"
               ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.window.header.color')}3"
               class="filter-author"/>
        <label pos="88 0" valign="center" size="30 3" halign="center" text="local" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="96 0" valign="center" size="30 3" halign="center" text="dedi" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label class="fav" pos="115.5 0" valign="center" size="3 3" text="" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="106 0" valign="center" size="30 3" halign="center" text="♦♦♦♦♦" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" textfont="{config('colors.ui.font')|noescape}"/>

        <frame id="buttons" pos="120 0" z-index="5">
            <label textfont="{config('colors.ui.font')|noescape}" class="btn juke" data-tab="01" size="11 3" text=" Juke" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}"
                   valign="center" halign="center" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}3"
                   focusareacolor2="{config('colors.ui.window.header.color')}9"/>
            <label textfont="{config('colors.ui.font')|noescape}" class="btn info" data-tab="012" size="10 3" text=" Info" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}"
                   valign="center" halign="center" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}3"
                   focusareacolor2="{config('colors.ui.window.header.color')}9"/>
            {if $localPlayer->hasAccess('map_disable') || $localPlayer->hasAccess('map_delete')}
            <label textfont="{config('colors.ui.font')|noescape}" class="btn delete" data-tab="01" size="4 3" text="" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}"
                   valign="center" halign="center" ScriptEvents="1" focusareacolor1="f003" focusareacolor2="f009"/>
            {/if}
        </frame>
    </framemodel>

    <framemodel id="QueueItem">
        <quad valign="center" pos="-2 0" size="200 4.5" bgcolor="{config('colors.ui.window.header.color')|noescape}" opacity="0"/>
        <label pos="1 0" valign="center" size="40 3" text="map name lol asdfasdasdsad asdfasdasdsad asdfasdas"
               textcolor="{config('colors.ui.window.text.primary')}"
               textsize="0.6" z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="44 0" valign="center" size="30 3" text="map author name comes here map author" textcolor="{config('colors.ui.window.text.primary')}"
               textsize="0.6" z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="80 0" valign="center" size="30 3" halign="center" text="local" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="88 0" valign="center" size="30 3" halign="center" text="dedi" textcolor="{config('colors.ui.window.text.primary')}" textsize="0.6"
               z-index="1" textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="94 0" valign="center" size="24 3" text="requested by requested by requested by" textcolor="{config('colors.ui.window.text.primary')}"
               textsize="0.6" z-index="1" textfont="{config('colors.ui.font')|noescape}"/>

        <frame id="queue-buttons" pos="120 0" z-index="5">
            <label textfont="{config('colors.ui.font')|noescape}" class="btn drop" data-tab="2" size="11 3" text=" Drop" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}"
                   valign="center" halign="center" ScriptEvents="1" focusareacolor1="f003" focusareacolor2="f009"/>
            <label textfont="{config('colors.ui.font')|noescape}" class="btn info" data-tab="012" size="10 3" text=" Info" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}"
                   valign="center" halign="center" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}3"
                   focusareacolor2="{config('colors.ui.window.header.color')}9"/>
        </frame>
    </framemodel>

    <frame id="map-list-window" pos="-20 55" size="122 106" hidden="1" z-index="300" scale="1.1">
        <quad id="handle" data-id="maps" pos="0 0" size="1 6" z-index="1"/>
        <quad pos="0 0" size="200 11" bgcolor="{config('colors.ui.window.header.color')|noescape}" opacity="0.9"/>
        <quad pos="0 -10.5" size="200 0.5" bgcolor="{config('colors.ui.window.header.color')|noescape}" z-index="2"/>
        <quad pos="0 0" size="200 150" bgcolor="{config('colors.ui.window.bg.color')|noescape}" opacity="{config('colors.ui.window.bg.opacity')}"/>
        <quad pos="0 0" size="200 150" style="Bgs1" substyle="BgDialogBlur"/>
        <label pos="1.5 -3" size="20 5" text=" Maps" valign="center" textsize="1.2" z-index="2" textcolor="{config('colors.ui.window.header.text')}"
               textfont="{config('colors.ui.font')|noescape}"/>
        <label id="close" class="close" pos="119 -3" size="6 6" text="❌" textsize="1.2" z-index="50" valign="center"
               halign="center" textcolor="{config('colors.ui.window.header.text')}" focusareacolor1="0000" focusareacolor2="{config('colors.ui.window.header.color')}f"
               ScriptEvents="1"/>

        <frame id="navbar" pos="0 -5.5" z-index="5">
            <label textfont="{config('colors.ui.font')|noescape}" class="nav-btn" pos="10 -3" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}" data-tab="0"
                   text="Maps" valign="center" halign="center" size="15 4" ScriptEvents="1"
                   focusareacolor1="{config('colors.ui.window.header.color')}3" focusareacolor2="{config('colors.ui.window.header.color')}c"/>
            <label textfont="{config('colors.ui.font')|noescape}" class="nav-btn" pos="27 -3" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}" data-tab="1"
                   text="Favorites" valign="center" halign="center" size="15 4" ScriptEvents="1"
                   focusareacolor1="{config('colors.ui.window.header.color')}3" focusareacolor2="{config('colors.ui.window.header.color')}c"/>
            <label textfont="{config('colors.ui.font')|noescape}" class="nav-btn" pos="44 -3" textsize="0.3" textcolor="{config('colors.ui.window.text.primary')}" data-tab="2"
                   text="Juked maps" valign="center" halign="center" size="15 4" ScriptEvents="1"
                   focusareacolor1="{config('colors.ui.window.header.color')}3" focusareacolor2="{config('colors.ui.window.header.color')}c"/>
            <quad id="nav-active" pos="10 -3" size="15 4" bgcolor="{config('colors.ui.window.header.color')}f" z-index="-1"
                  halign="center" valign="center"/>
        </frame>

        <frame id="maps-all" pos="2 -13" z-index="2">
            <frame scale="0.97" pos="0 -6">
                <label pos="1  1" textsize="1" text="Name" scale="0.8" textcolor="{config('colors.ui.window.header.color')}"
                       textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="52 1" textsize="1" text="Author" scale="0.8" textcolor="{config('colors.ui.window.header.color')}"
                       textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="88 1" textsize="1" text="Local" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="96 1" textsize="1" text="Dedi" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="106 1" textsize="1" text="Karma" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="117 1" textsize="1" text="Favorite" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>

                <frame id="sorting-controls" pos="-1 5.25">
                    <quad valign="center" pos="-1" size="200 6" textcolor="{config('colors.ui.window.bg.color')}" opacity="{config('colors.ui.window.bg.opacity') - 0.1}" z-index="-1"/>
                    <label pos="2 0" textsize="1" text="Sort/Filter:" scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center"/>

                    <label class="filter-btn" data-sort="all" pos="20" size="13 4" textsize="0.7" text="Show All"
                           scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                    <label class="filter-btn" data-sort="nofinish" pos="32" size="15 4" textsize="0.7"
                           text="No Finish" scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>

                    <label pos="43" size="11 4" textsize="0.7" text=" Locals" scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}3"/>
                    <label class="filter-btn" data-sort="best" pos="49.2" size="4 4" textsize="0.7" text="" scale="0.8"
                           textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                    <label class="filter-btn" data-sort="worst" pos="52.6" size="4 4" textsize="0.7" text=""
                           scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>

                    <label pos="59.4" size="11 4" textsize="0.7" text=" Dedis" scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}3"/>
                    <label class="filter-btn" data-sort="best_dedi" pos="65.6" size="4 4" textsize="0.7" text=""
                           scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                    <label class="filter-btn" data-sort="worst_dedi" pos="69" size="4 4" textsize="0.7" text=""
                           scale="0.8" textcolor="{config('colors.ui.window.text.primary')}"
                           textfont="{config('colors.ui.font')|noescape}" valign="center" halign="center" ScriptEvents="1"
                           focusareacolor1="{config('colors.ui.window.header.color')}3"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                </frame>

                <frame id="map-list" pos="0 -3">
                    {for $i = 0; $i<20; $i++}
                    <frameinstance pos="0 {$i * -4 - 2}" modelid="Map" hidden="0"/>
                    {/for}
                </frame>

                <frame id="pagination" pos="2 -86.5" scale="0.9">
                    <entry id="page-input" class="page-input" pos="6 0" size="8 3.5" valign="center" halign="center"
                           text="1" textsize="0.8" focusareacolor1="0000" focusareacolor2="0009" ScriptEvents="1" textcolor="{config('colors.ui.window.text.primary')}"
                           hidden="1"/>
                    <label id="page-info" class="enable-page-input" pos="6 0" size="8 3.5" valign="center"
                           halign="center" text="1/1" textsize="0.8" focusareacolor1="0000" focusareacolor2="0009" textcolor="{config('colors.ui.window.text.primary')}"
                           ScriptEvents="1"/>
                    <label class="previous-page" pos="0 0" size="3.5 3.5" valign="center" halign="center" text="⏴"
                           textsize="1" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}3" textcolor="{config('colors.ui.window.text.primary')}"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                    <label class="next-page" pos="12 0" size="3.5 3.5" valign="center" halign="center" text="⏵"
                           textsize="1" ScriptEvents="1" focusareacolor1="{config('colors.ui.window.header.color')}3" textcolor="{config('colors.ui.window.text.primary')}"
                           focusareacolor2="{config('colors.ui.window.header.color')}c"/>
                </frame>

                <frame id="search-frame" pos="124 -86.5" scale="0.9">
                    <label textfont="{config('colors.ui.font')|noescape}" pos="30 0" halign="right" valign="center" textsize="0.9" text="🔍" textcolor="{config('colors.ui.window.text.primary')}"/>
                    <entry textfont="{config('colors.ui.font')|noescape}" id="search-input" class="search-input" pos="26.5 0" size="25 3.5" textcolor="{config('colors.ui.window.text.primary')}"
                           halign="right" valign="center" style="TextValueSmall" default="" textsize="1.2"/>
                    <label textfont="{config('colors.ui.font')|noescape}" id="clear-search" class="clear-search" pos="0 0" size="3.5 3.5" textcolor="{config('colors.ui.window.text.primary')}"
                           halign="center" valign="center" textsize="0.25" text="" focusareacolor1="f003"
                           focusareacolor2="f009" ScriptEvents="1" hidden="1"/>
                </frame>
            </frame>
        </frame>

        <frame id="maps-queue" pos="2 -13" z-index="2" hidden="1">
            <frame scale="0.97" pos="0 -2">
                <label pos="1  1" textsize="1" text="Name" scale="0.8" textcolor="{config('colors.ui.window.header.color')}"
                       textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="44 1" textsize="1" text="Author" scale="0.8" textcolor="{config('colors.ui.window.header.color')}"
                       textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="80 1" textsize="1" text="Local" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="88 1" textsize="1" text="Dedi" halign="center" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="94 1" textsize="1" text="Requested by" halign="left" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>
                <label pos="120 1" textsize="1" text="Actions" halign="left" scale="0.8"
                       textcolor="{config('colors.ui.window.header.color')}" textfont="{config('colors.ui.font')|noescape}"/>

                <frame id="queue-list" pos="0 -3">
                    {for $i = 0; $i<22; $i++}
                    <frameinstance pos="0 {$i * -4 - 2}" modelid="QueueItem" hidden="1"/>
                    {/for}
                </frame>
            </frame>
        </frame>
    </frame>

    <frame id="widget" pos="{config('map-list.pos.visible')}" data-pos-visible="{config('map-list.pos.visible')}"
           data-pos-hidden="{config('map-list.pos.hidden')}" scale="0.8" size="50 10">
        <label pos="38 -2" z-index="1" size="36 3" text="Map name" halign="right" textcolor="eeee" textsize="1.4"
               textfont="{config('colors.ui.font')|noescape}"/>
        <label pos="38 -7" z-index="1" size="36 3" text="Author name" halign="right" textcolor="dddd" valign="center"
               textsize="0.6" textfont="{config('colors.ui.font')|noescape}"/>

        <label pos="45 -5" valign="center" halign="center" textsize="2" size="6 6" text="" textcolor="{config('colors.ui.widget.text.primary')}"
               textfont="{config('colors.ui.font')|noescape}"/>

        <quad pos="0 0" size="40 10" bgcolor="{config('colors.ui.widget.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" ScriptEvents="1"/>
        <quad pos="40 0" size="10 10" bgcolor="{config('colors.ui.window.header.color')}e" ScriptEvents="1"/>

        <frame id="controls" pos="5 -10.5" z-index="10">
            <quad pos="-5 0" size="40 10" bgcolor="{config('colors.ui.window.bg.color')|noescape}6" z-index="-1"/>
            <quad pos="-5 0" size="40 10" bgcolor="{config('colors.ui.window.header.color')}6" z-index="-2"/>

            <frame pos="1.7 -5">
                <label class="map-control quick-fav" textsize="1.5" size="13.3 10" text="" z-index="0" halign="center"
                       valign="center" ScriptEvents="1" focusareacolor1="0000"
                       focusareacolor2="{config('colors.ui.window.header.color')}9"/>
                <label id="fav-button" pos="0 1.5" textsize="1.5" size="10 10" text="" z-index="1" halign="center"
                       valign="center"/>
                <label id="fav-text" textfont="{config('colors.ui.font')|noescape}" pos="0 -2" textsize="1" scale="0.8" size="10 10" text="Add"
                       z-index="1"
                       halign="center" valign="center"/>
            </frame>

            <frame pos="15 -5">
                <label class="map-control details" textsize="1.5" size="13.3 10" text="" z-index="0" halign="center"
                       valign="center" ScriptEvents="1" focusareacolor1="0000"
                       focusareacolor2="{config('colors.ui.window.header.color')}9"/>
                <label pos="0 1.5" textsize="1.5" size="10 10" text="" z-index="1" halign="center" valign="center"/>
                <label textfont="{config('colors.ui.font')|noescape}" pos="0 -2" textsize="1" scale="0.8" size="10 10" text="Details"
                       z-index="1" halign="center" valign="center"/>
            </frame>

            <frame pos="28.3 -5">
                <label class="map-control list" textsize="1.5" size="13.3 10" text="" z-index="0" halign="center"
                       valign="center" ScriptEvents="1" focusareacolor1="0000"
                       focusareacolor2="{config('colors.ui.window.header.color')}9"/>
                <label pos="0 1.5" textsize="1.5" size="10 10" text="" z-index="1" halign="center" valign="center"/>
                <label textfont="{config('colors.ui.font')|noescape}" pos="0 -2" textsize="1" scale="0.8" size="10 10" text="Maps" z-index="1"
                       halign="center" valign="center"/>
            </frame>

        </frame>
    </frame>

    <frame id="delete-dialog" pos="-40 9" z-index="1000" hidden="1">
        <quad size="80 20" bgcolor="{config('colors.ui.window.bg.color')}" opacity="0.9" z-index="-1"/>
        <quad size="80 2" bgcolor="{config('colors.ui.window.header.color')}" opacity="0.9" z-index="0"/>
        <label pos="40 -5" size="76" valign="center" halign="center" text="" textsize="1" z-index="1"/>
        <label class="perm" pos="40 -9" size="76" valign="center" halign="center"
               text=" Delete permanently and from all MatchSettings" data-set="0" textsize="1" z-index="1" scale="0.7"
               focusareacolor1="0000" focusareacolor2="0000" ScriptEvents="1" hidden="0"/>

        <label class="confirm" pos="32 -15" z-index="0" size="15 5" text="YES" ScriptEvents="1"
               focusareacolor1="07E20099" halign="center" valign="center" textsize="0.5" focusareacolor2="06BD00AA"
               scriptevents="1"/>
        <label class="cancel" pos="48 -15" z-index="0" size="15 5" text="NO" ScriptEvents="1" focusareacolor1="f009"
               halign="center" valign="center" textsize="0.5" focusareacolor2="BD0000AA" scriptevents="1"/>
        <quad size="80 20" style="Bgs1" substyle="BgDialogBlur" z-index="-1"/>
    </frame>

    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL
--></script>

    {include 'scripts.hide', hideOnPodium => true}
    {include 'scripts.drag'}

    <script><!--

declare Integer[] favorites;
declare Text[Text][] maps;
declare Text[Text][Integer] mapAuthors;
declare Text[Text][] currentMapPool;
declare Integer lastMapQueueLength;
declare Integer currentPage;
declare Integer currentTab;
declare Real buttonsWidth;
declare CMlFrame mapListFrame;
declare Text currentMapUid;
declare Integer cooldown;
declare Text[Text] currentMap;
declare Boolean inSearch;
declare Boolean userCanDrop;

Text[Text] getAuthor(Text id){
    return mapAuthors[TL::ToInteger(id)];
}

Void updateCooldownValues(){
    for(i, 0, maps.count - 1){
        maps[i]["c"] = TL::ToText(TL::ToInteger(maps[i]["c"]) + 1);
    }
    for(i, 0, currentMapPool.count - 1){
        currentMapPool[i]["c"] = TL::ToText(TL::ToInteger(currentMapPool[i]["c"]) + 1);
    }
}

Void resetCooldown(Text[Text] map){
    if(!map.existskey("uid")){
        log("[Maps] Reset cooldown Error");
        log(map);
        return;
    }

    for(i, 0, maps.count - 1){
        if(maps[i]["uid"] == map["uid"]){
            maps[i]["c"] = "0";
        }
    }
    for(i, 0, currentMapPool.count - 1){
        if(currentMapPool[i]["uid"] == map["uid"]){
            currentMapPool[i]["c"] = "0";
        }
    }
}

Text[Text] findMapByUid(Text Uid){
    foreach(map in maps){
        if(!map.existskey("uid")){
            log("[Maps] findMapById Error " ^ Uid);
            return Text[Text];
        }

        if(map["uid"] == Uid){
            return map;
        }
    }

    return Text[Text];
}

Text[Text] findMapById(Text id){
    foreach(map in maps){
        if(!map.existskey("id")){
            log("[Maps] findMapById Error " ^ id);
            return Text[Text];
        }

        if(map["id"] == id){
            return map;
        }
    }

    return Text[Text];
}

Void updateWidget(Text[Text] map){
    if(!map.existskey("a")){
        log("[Maps] update Widget Error");
        log(map);
        return;
    }

    declare widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
    declare author = getAuthor(map["a"]);
    (widget.Controls[0] as CMlLabel).SetText(map["name"]);
    (widget.Controls[1] as CMlLabel).SetText(author["nick"]);

    if(favorites.exists(TL::ToInteger(map["id"]))){
        (Page.MainFrame.GetFirstChild("fav-button") as CMlLabel).SetText("");
        (Page.MainFrame.GetFirstChild("fav-text") as CMlLabel).SetText("Remove");
    }else{
        (Page.MainFrame.GetFirstChild("fav-button") as CMlLabel).SetText("");
        (Page.MainFrame.GetFirstChild("fav-text") as CMlLabel).SetText("Add");
    }
}

Void resizeWindow(){
    declare handle <=> (Page.MainFrame.GetFirstChild("handle") as CMlQuad);
    declare searchFrame <=> (Page.MainFrame.GetFirstChild("search-frame") as CMlFrame);
    declare closeButton <=> (Page.MainFrame.GetFirstChild("close") as CMlLabel);
    declare header <=> (Page.MainFrame.GetFirstChild("handle") as CMlQuad);
    declare width = buttonsWidth + 119.0;
    mapListFrame.Size = <width, mapListFrame.Size[1]>;
    header.Size = <width, header.Size[1]>;
    handle.Size = <width - 6.0, handle.Size[1]>;
    mapListFrame.RelativePosition_V3 = <(width*mapListFrame.Scale) / -2.0, mapListFrame.RelativePosition_V3[1]>;
    searchFrame.RelativePosition_V3 = <width - 26.0, searchFrame.RelativePosition_V3[1]>;
    closeButton.RelativePosition_V3 = <width - 3.0, closeButton.RelativePosition_V3[1]>;
}

Void rearrangeButtons(){
    declare Text listId = "";
    declare Text buttonsId = "";
    if(currentTab == 2){
        listId = "queue-list";
        buttonsId = "queue-buttons";
    }else{
        listId = "map-list";
        buttonsId = "buttons";
    }
    declare mapList <=> (Page.MainFrame.GetFirstChild(listId) as CMlFrame);
    declare Real padding;

    buttonsWidth = 0.0;

    foreach(control in mapList.Controls){
        declare buttonsFrame = ((control as CMlFrame).GetFirstChild(buttonsId) as CMlFrame);
        padding = 0.0;

        foreach(button in buttonsFrame.Controls){
            if(!button.Visible){
                continue;
            }

            declare Real width = button.Size[0];
            declare offset = width / 2.0 + padding;
            button.RelativePosition_V3 = <offset, 0.0>;
            padding = offset + width / 2.0 + 1.0;
        }

        if(padding > buttonsWidth){
            buttonsWidth = padding;
        }
    }

    resizeWindow();
}

Boolean hasLocal(Text mapId){
    declare Integer[Text] Locals for LocalUser;
    return Locals.existskey(mapId);
}

Boolean hasDedi(Text mapId){
    declare Integer[Text] Dedis for LocalUser;
    return Dedis.existskey(mapId);
}

Boolean hasRecord(Text mapId){
    return (hasLocal(mapId) || hasDedi(mapId));
}

Text getLocal(Text mapId){
    declare Integer[Text] Locals for LocalUser;

    if(Locals.existskey(mapId)){
        return TL::ToText(Locals[mapId]) ^ ".";
    }

    return "$999-";
}

Text getDedi(Text mapId){
    declare Integer[Text] Dedis for LocalUser;

    if(Dedis.existskey(mapId)){
        return TL::ToText(Dedis[mapId]) ^ ".";
    }

    return "$999-";
}

Text getStarString(Real rating){
    if(rating == -1){
        return "$666";
    }

    declare Text starString = "";
    declare Real stars = rating / 20.0;
    declare Integer full = ML::FloorInteger(stars);
    declare Real left = stars - full;

    for(i, 0, full - 1){
        starString = starString ^ "${config('colors.ui.window.text.primary')|noescape}";
    }

    if(left >= 0.5){
        starString = starString ^ "${config('colors.ui.window.text.primary')|noescape}";
        full = full + 1;
    }

    for(i, full + 1, 5){
        starString = starString ^ "$666";
    }

    return starString;
}

Void updateView(Text[Text][] mapPool, Integer page){
    declare mapsFrame = (Page.MainFrame.GetFirstChild("map-list") as CMlFrame);
    declare pageInfo = (Page.MainFrame.GetFirstChild("page-info") as CMlLabel);
    declare Integer start = page * 20;
    declare Integer rowsFilled = 0;

    for(i, 0, 19){
        declare Integer id = start + i;

        if(id >= mapPool.count){
            break;
        }

        declare Text[Text] map = mapPool[id];

        if(!map.existskey("a") || !map.existskey("id")){
            log("[Maps] Update view Error");
            log(map);
            continue;
        }

        declare Text[Text] author = getAuthor(map["a"]);

        declare mapFrame <=> (mapsFrame.Controls[i] as CMlFrame);
        mapFrame.DataAttributeSet("map-id", map["id"]);
        mapFrame.DataAttributeSet("map-uid", map["uid"]);
        (mapFrame.Controls[1] as CMlLabel).SetText(map["name"]);
        (mapFrame.Controls[2] as CMlLabel).SetText(author["nick"]);
        (mapFrame.Controls[3] as CMlLabel).SetText(getLocal(map["id"]));
        (mapFrame.Controls[4] as CMlLabel).SetText(getDedi(map["id"]));

        {if !$ignoreCooldown}
        if(TL::ToInteger(map["c"]) < cooldown){
            (mapFrame.Controls[1] as CMlLabel).Opacity = 0.15;
            (mapFrame.Controls[2] as CMlLabel).Opacity = 0.15;
        }else{
            (mapFrame.Controls[1] as CMlLabel).Opacity = 1.0;
            (mapFrame.Controls[2] as CMlLabel).Opacity = 1.0;
        }
        {/if}

        if(favorites.exists(TL::ToInteger(map["id"]))){
            (mapFrame.Controls[5] as CMlLabel).SetText("");
        }else{
            (mapFrame.Controls[5] as CMlLabel).SetText("");
        }

        (mapFrame.Controls[6] as CMlLabel).SetText(getStarString(TL::ToReal(map["r"])));
        mapFrame.Show();

        rowsFilled = rowsFilled + 1;
    }

    if(rowsFilled < 19){
        for(i, rowsFilled, 19){
            (mapsFrame.Controls[i] as CMlFrame).Hide();
        }
    }

    pageInfo.SetText((page + 1) ^ "/" ^ ML::CeilingInteger(mapPool.count / 20.0));
}

Void checkMapQueueChanged(){
    declare Text[Text][] MapQueue for LocalUser;

    if(MapQueue.count == lastMapQueueLength){
        return;
    }

    declare queueListFrame <=> (Page.MainFrame.GetFirstChild("queue-list") as CMlFrame);
    declare filled = 0;
    for(i, 0, MapQueue.count - 1){
        if(i >= queueListFrame.Controls.count - 1){
            return;
        }

        declare queueItemFrame = (queueListFrame.Controls[i] as CMlFrame);
        declare queueItem = MapQueue[i];

        declare Text[Text] map = findMapById(queueItem["id"]);

        if(!map.existskey("a") || !map.existskey("id")){
            log("[Maps] Check maps queue Error");
            log(map);
            continue;
        }

        declare Text[Text] author = getAuthor(map["a"]);

        queueItemFrame.DataAttributeSet("map-id", map["id"]);
        queueItemFrame.DataAttributeSet("map-uid", map["uid"]);
        queueItemFrame.DataAttributeSet("issuer", queueItem["by"]);
        queueItemFrame.DataAttributeSet("id", queueItem["queue_id"]);

        (queueItemFrame.Controls[1] as CMlLabel).SetText(map["name"]);
        (queueItemFrame.Controls[2] as CMlLabel).SetText(author["nick"]);
        (queueItemFrame.Controls[3] as CMlLabel).SetText(getLocal(map["id"]));
        (queueItemFrame.Controls[4] as CMlLabel).SetText(getDedi(map["id"]));
        (queueItemFrame.Controls[5] as CMlLabel).SetText(queueItem["nick"]);

        declare buttons = (queueItemFrame.Controls[6] as CMlFrame);
        if(!userCanDrop){
            if(LocalUser.Login != queueItem["by"]){
                (buttons.Controls[0] as CMlLabel).Hide();
            }
        }

        queueItemFrame.Show();

        filled += 1;
    }

    if(filled < queueListFrame.Controls.count - 1){
        for(i, filled, queueListFrame.Controls.count - 1){
            (queueListFrame.Controls[i] as CMlFrame).Hide();
        }
    }

    lastMapQueueLength = MapQueue.count;
}

Text[Text][] getFavoritesPool(){
    declare Text[Text][] pool = Text[Text][];
    declare favsCount = favorites.count;
    declare start = currentPage * 20;
    declare end = start + 20;

    if(end >= favsCount){
        end = favsCount - 1;
    }

    for(i, start, end){
        declare index = favorites[i];
        pool.add(findMapById(TL::ToText(index)));
    }

    return pool;
}

Void tabButtonPressed(CMlControl control){
    declare activeBg <=> (Page.MainFrame.GetFirstChild("nav-active") as CMlQuad);
    declare mapsAllFrame <=> (Page.MainFrame.GetFirstChild("maps-all") as CMlFrame);
    declare mapsQueueFrame <=> (Page.MainFrame.GetFirstChild("maps-queue") as CMlFrame);
    declare btn <=> (control as CMlLabel);
    declare tab = btn.DataAttributeGet("tab");
    activeBg.RelativePosition_V3 = control.RelativePosition_V3;

    currentPage = 0;
    currentTab = TL::ToInteger(tab);
    rearrangeButtons();

    if(tab == "0"){
        //Maps
        currentMapPool = maps;
        updateView(currentMapPool, currentPage);
        mapsAllFrame.Show();
        mapsQueueFrame.Hide();
    }

    if(tab == "1"){
        //Favorites
        currentMapPool = getFavoritesPool();
        updateView(currentMapPool, currentPage);
        mapsAllFrame.Show();
        mapsQueueFrame.Hide();
    }

    if(tab == "2"){
        //Juked maps
        mapsAllFrame.Hide();
        mapsQueueFrame.Show();
    }
}

Void search(){
    declare Text[Text][] mapsFound = Text[Text][];
    declare input <=> (Page.MainFrame.GetFirstChild("search-input") as CMlEntry);
    declare clearSearch <=> (Page.MainFrame.GetFirstChild("clear-search") as CMlLabel);
    declare search = TL::Trim(input.Value);

    if(search == "all"){
        search = "";
        input.SetText("", False);
    }

    switch(search){
        case "":{
            if(currentTab == 0){
                currentMapPool = maps;
            }
            if(currentTab == 1){
                currentMapPool = getFavoritesPool();
            }
            updateView(currentMapPool, 0);
            clearSearch.Hide();
            return;
        }

        case "nofinish":{
            for(i, 0, currentMapPool.count - 1){
                declare map = currentMapPool[i];
                if(!hasRecord(map["id"])){
                    mapsFound.add(map);
                }
            }
        }

        case "best":{
            declare Text[Text][Text] selected = Text[Text][Text];
            for(i, 0, currentMapPool.count - 1){
                declare map = currentMapPool[i];
                if(hasLocal(map["id"])){
                    selected[map["id"]] = map;
                }
            }

            declare Integer[Text] Locals for LocalUser;
            foreach(mapId => local in Locals){
                if(selected.existskey(mapId)){
                    mapsFound.add(selected[mapId]);
                }
            }
        }

        case "worst":{
            declare Text[Text][Text] selected = Text[Text][Text];
            for(i, 0, currentMapPool.count - 1){
                declare map = currentMapPool[i];
                if(hasLocal(map["id"])){
                    selected[map["id"]] = map;
                }
            }

            declare Text[] localsAsc = Text[];

            declare Integer[Text] Locals for LocalUser;
            foreach(mapId => local in Locals){
                localsAsc.add(mapId);
            }

            declare Text[] localsDesc = localsAsc;

            for(i, 0, localsAsc.count - 1){
                localsDesc[localsAsc.count - i - 1] = localsAsc[i];
            }

            foreach(mapId in localsDesc){
                if(selected.existskey(mapId)){
                    mapsFound.add(selected[mapId]);
                }
            }
        }

        case "best_dedi":{
            declare Text[Text][Text] selected = Text[Text][Text];
            for(i, 0, currentMapPool.count - 1){
                declare map = currentMapPool[i];
                if(hasDedi(map["id"])){
                    selected[map["id"]] = map;
                }
            }

            declare Integer[Text] Dedis for LocalUser;
            foreach(mapId => dedi in Dedis){
                if(selected.existskey(mapId)){
                    mapsFound.add(selected[mapId]);
                }
            }
        }

        case "worst_dedi":{
            declare Text[Text][Text] selected = Text[Text][Text];
            for(i, 0, currentMapPool.count - 1){
                declare map = currentMapPool[i];
                if(hasDedi(map["id"])){
                    selected[map["id"]] = map;
                }
            }

            declare Text[] dedisAsc = Text[];

            declare Integer[Text] Dedis for LocalUser;
            foreach(mapId => dedi in Dedis){
                dedisAsc.add(mapId);
            }

            declare Text[] dedisDesc = dedisAsc;

            for(i, 0, dedisAsc.count - 1){
                dedisDesc[dedisAsc.count - i - 1] = dedisAsc[i];
            }

            foreach(mapId in dedisDesc){
                if(selected.existskey(mapId)){
                    mapsFound.add(selected[mapId]);
                }
            }
        }

        default: {
            for(i, 0, maps.count - 1){
                declare map = maps[i];

                if(!map.existskey("a")){
                    log("[Maps] Null author for map " ^ map["id"]);
                    continue;
                }

                declare Text[Text] author = getAuthor(map["a"]);
                declare searchString = map["name"]^author["nick"]^author["login"];
                if(TL::Find(input.Value, searchString, False, False)){
                    mapsFound.add(map);
                }
            }
        }
    }

    currentPage = 0;
    currentMapPool = mapsFound;
    updateView(mapsFound, 0);
    clearSearch.Show();
}

Void checkMapSearchQuery(){
    declare Text MapSearchQuery for LocalUser;
    if(MapSearchQuery != ""){
        declare input <=> (Page.MainFrame.GetFirstChild("search-input") as CMlEntry);

        input.SetText(TL::Trim(MapSearchQuery), True);
        mapListFrame.Show();
        MapSearchQuery = "";
    }
}

//Open confirm dialog and return decision
Integer confirm(Text question){
    declare confirmDialogFrame <=> (Page.MainFrame.GetFirstChild("delete-dialog") as CMlFrame);
    declare permLabel <=> (confirmDialogFrame.Controls[3] as CMlLabel);
    declare Integer answer = 1;
    declare Boolean decided = False;

    //show confirm dialog
    confirmDialogFrame.Show();

    //Set question text
    (confirmDialogFrame.Controls[2] as CMlLabel).SetText(question);

    while(!decided){
        yield;

        foreach(event in PendingEvents){
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("perm")){
                declare label = (event.Control as CMlLabel);
                declare set = (label.DataAttributeGet("set") == "1");
                if(set){
                    label.DataAttributeSet("set", "0");
                    label.SetText(" Delete permanently and from all MatchSettings");
                    answer = 1;
                }else{
                    label.DataAttributeSet("set", "1");
                    label.SetText(" Delete permanently and from all MatchSettings");
                    answer = 2;
                }
            }
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("confirm")){
                decided = True;
            }
            if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("cancel")){
                answer = 0;
                decided = True;
            }
        }
    }

    //hide confirm dialog
    confirmDialogFrame.Hide();
    permLabel.SetText(" Delete permanently and from all MatchSettings");
    permLabel.DataAttributeSet("set", "0");

    return answer; // 0 = cancel, 1 = delete from current matchsettings, 2 = delete file and all records
}

Void buttonPressed(CMlFrame mapFrame, CMlControl control){
    if(control.HasClass("juke")){
        TriggerPageAction("map.queue," ^ mapFrame.DataAttributeGet("map-uid"));
        return;
    }

    if(control.HasClass("drop")){
        TriggerPageAction("map.drop," ^ mapFrame.DataAttributeGet("map-uid"));
        return;
    }

    if(control.HasClass("info")){
        TriggerPageAction("mx.details," ^ mapFrame.DataAttributeGet("map-id"));
        return;
    }

    if(control.HasClass("delete")){
        declare answer = confirm("Disable map?");

        if(answer == 1){
            TriggerPageAction("maplist.disable," ^ mapFrame.DataAttributeGet("map-uid"));
        }

        if(answer == 2){
            TriggerPageAction("maplist.delete," ^ mapFrame.DataAttributeGet("map-uid"));
        }
    }
}

Void favAction(CMlScriptEvent event){
    declare btn = (event.Control as CMlLabel);
    declare mapId = btn.Parent.DataAttributeGet("map-id");

    if(event.Type == CMlScriptEvent::Type::MouseClick){
        declare isFav = btn.Value == "";

        if(isFav){
            btn.SetText("");
            TriggerPageAction("map.fav.remove," ^ mapId);
            favorites.remove(TL::ToInteger(mapId));
        }else{
            btn.SetText("");
            TriggerPageAction("map.fav.add," ^ mapId);
            favorites.add(TL::ToInteger(mapId));
        }

        if(currentTab == 0 || currentTab == 2){
            updateView(currentMapPool, currentPage);
        }

        if(currentTab == 1){
            currentMapPool = getFavoritesPool();
            updateView(currentMapPool, currentPage);
        }
    }
}

Void quickFavAction(CMlScriptEvent event){
    if(event.Type == CMlScriptEvent::Type::MouseClick){
        declare mapId = TL::ToInteger(currentMap["id"] ^ "");

        if(favorites.exists(mapId)){
            TriggerPageAction("map.fav.remove," ^ mapId);
            favorites.remove(mapId);
            (Page.MainFrame.GetFirstChild("fav-button") as CMlLabel).SetText("");
            (Page.MainFrame.GetFirstChild("fav-text") as CMlLabel).SetText("Add");
        }else{
            TriggerPageAction("map.fav.add," ^ mapId);
            favorites.add(mapId);
            (Page.MainFrame.GetFirstChild("fav-button") as CMlLabel).SetText("");
            (Page.MainFrame.GetFirstChild("fav-text") as CMlLabel).SetText("Remove");
        }

        if(currentTab == 0 || currentTab == 2){
            updateView(currentMapPool, currentPage);
        }

        if(currentTab == 1){
            currentMapPool = getFavoritesPool();
            updateView(currentMapPool, currentPage);
        }
    }
}

main() {
    inSearch = False;
    lastMapQueueLength = 0;
    currentPage = 0;
    currentTab = 0;
    userCanDrop = {($localPlayer->hasAccess('queue_drop') ? 'True' : 'False')|noescape};
    favorites = {$favorites|noescape};
    cooldown = {config('server.map-cooldown')};

    mapListFrame = (Page.MainFrame.GetFirstChild("map-list-window") as CMlFrame);
    declare widget = (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
    declare widgetControls = (Page.MainFrame.GetFirstChild("controls") as CMlFrame);
    declare controlsVisible = False;
    declare Text[Text][] Maps for LocalUser;
    declare Text[Text][Integer] MapAuthors for LocalUser;
    declare Integer MapUpdateTime for LocalUser = 0;
    declare lastMapUpdate = 0;

    rearrangeButtons();

    while(Maps.count == 0){
        yield;
        hidescript();
    }

    while(True){
        yield;

        if(MapUpdateTime != 0 && lastMapUpdate != MapUpdateTime){
            lastMapUpdate = MapUpdateTime;
            mapAuthors = MapAuthors;
            maps = Maps;

            if(currentTab == 0){
                currentMapPool = maps;
                updateView(currentMapPool, currentPage);
            }

            log("[EvoSC:update-map-list] Loaded " ^ MapAuthors.count ^ " authors.");
            log("[EvoSC:update-map-list] Loaded " ^ Maps.count ^ " maps.");
        }

        foreach(event in PendingEvents){
            if(event.Control == Null){
                continue;
            }

            if(event.Control.HasClass("close") && event.Type == CMlScriptEvent::Type::MouseClick){
                mapListFrame.Hide();
                continue;
            }

            if(event.Control.HasClass("details") && event.Type == CMlScriptEvent::Type::MouseClick){
                if(!currentMap.existskey("id")){
                    return;
                }
                TriggerPageAction("mx.details," ^ currentMap["id"]);
                continue;
            }

            if(event.Control.HasClass("enable-page-input") && event.Type == CMlScriptEvent::Type::MouseClick){
                declare pageInfo <=> (Page.MainFrame.GetFirstChild("page-info") as CMlLabel);
                declare pageInput <=> (Page.MainFrame.GetFirstChild("page-input") as CMlEntry);
                pageInfo.Hide();
                pageInput.Value = "";
                pageInput.Show();
                pageInput.Focus();
                continue;
            }

            if(event.Control.HasClass("page-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
                declare pageInfo <=> (Page.MainFrame.GetFirstChild("page-info") as CMlLabel);
                declare pageInput <=> (Page.MainFrame.GetFirstChild("page-input") as CMlEntry);
                declare page = TL::ToInteger(pageInput.Value);

                if(page != -1){
                    currentPage = page - 1;

                    if(currentPage < 0){
                        currentPage = 0;
                    }
                    if(currentPage >= ML::CeilingInteger(currentMapPool.count / 20.0)){
                        currentPage = ML::CeilingInteger(currentMapPool.count / 20.0) - 1;
                    }

                    updateView(currentMapPool, currentPage);
                }

                pageInfo.Show();
                pageInput.Hide();

                continue;
            }

            if(event.Control.HasClass("list") && event.Type == CMlScriptEvent::Type::MouseClick){
                mapListFrame.Show();
                continue;
            }

            if(event.Control.HasClass("nav-btn") && event.Type == CMlScriptEvent::Type::MouseClick){
                tabButtonPressed(event.Control);
                continue;
            }

            if(event.Control.HasClass("search-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
                search();
                continue;
            }

            if(event.Control.HasClass("fav")){
                favAction(event);
                continue;
            }

            if(event.Control.HasClass("quick-fav")){
                quickFavAction(event);
                continue;
            }

            if(event.Control.HasClass("clear-search") && event.Type == CMlScriptEvent::Type::MouseClick){
                declare input <=> (Page.MainFrame.GetFirstChild("search-input") as CMlEntry);
                input.SetText("", True);
                continue;
            }

            if(event.Control.HasClass("previous-page") && event.Type == CMlScriptEvent::Type::MouseClick){
                currentPage = currentPage - 1;
                if(currentPage < 0){
                    currentPage = ML::CeilingInteger(currentMapPool.count / 20.0) - 1;
                }
                updateView(currentMapPool, currentPage);
                continue;
            }

            if(event.Control.HasClass("next-page") && event.Type == CMlScriptEvent::Type::MouseClick){
                currentPage = currentPage + 1;
                if(currentPage >= ML::CeilingInteger(currentMapPool.count / 20.0)){
                    currentPage = 0;
                }
                updateView(currentMapPool, currentPage);
                continue;
            }

            if(event.Control.HasClass("filter-btn") && event.Type == CMlScriptEvent::Type::MouseClick){
                declare input <=> (Page.MainFrame.GetFirstChild("search-input") as CMlEntry);
                input.SetText(event.Control.DataAttributeGet("sort"), True);
                mapListFrame.Show();
            }

            if(event.Control.HasClass("filter-author") && event.Type == CMlScriptEvent::Type::MouseClick){
                declare mapId = event.Control.Parent.DataAttributeGet("map-id");
                declare id = findMapById(mapId)["a"];
                declare input <=> (Page.MainFrame.GetFirstChild("search-input") as CMlEntry);
                input.SetText(mapAuthors[TL::ToInteger(id)]["login"], True);
            }

            if(event.Control.HasClass("btn")){
                declare mapFrame = (event.Control.Parent.Parent as CMlFrame);

                if(event.Type == CMlScriptEvent::Type::MouseClick){
                    (mapFrame.Controls[0] as CMlQuad).Opacity = 0.0;
                    buttonPressed(mapFrame, event.Control);
                    continue;
                }

                if(event.Type == CMlScriptEvent::Type::MouseOver){
                    (mapFrame.Controls[0] as CMlQuad).Opacity = 0.5;
                    continue;
                }

                if(event.Type == CMlScriptEvent::Type::MouseOut){
                    (mapFrame.Controls[0] as CMlQuad).Opacity = 0.0;
                    continue;
                }
            }
        }

        if(currentMapUid != Map.MapInfo.MapUid && maps.count > 0){
            currentMapUid = Map.MapInfo.MapUid;
            currentMap = findMapByUid(currentMapUid);
            updateCooldownValues();
            resetCooldown(currentMap);
            updateView(currentMapPool, currentPage);
            updateWidget(currentMap);
        }

        checkMapQueueChanged();
        checkMapSearchQuery();
        maniaLinkDrag();
        hidescript();

        declare x_min = widget.RelativePosition_V3[0];
        declare x_max = widget.RelativePosition_V3[0] + (widget.Size[0] * widget.RelativeScale);
        declare y_min = widget.RelativePosition_V3[1];
        declare y_max = widget.RelativePosition_V3[1] - (widget.Size[1] * widget.RelativeScale);
        declare Boolean xInBounds = (MouseX > x_min && MouseX < x_max);
        declare Boolean yInBounds = (MouseY < y_min && MouseY > y_max);

        if(!(xInBounds && yInBounds) && controlsVisible){
            controlsVisible = False;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 -10.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
        if((xInBounds && yInBounds) && !controlsVisible){
            controlsVisible = True;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 0.0' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
    }
}
    --></script>
</manialink>